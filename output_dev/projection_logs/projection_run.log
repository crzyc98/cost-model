2025-05-09 17:21:02,381 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:21:02,386 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:21:02,386 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:21:02,386 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:21:02,386 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:21:02,386 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:21:02,436 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:21:02,443 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:21:02,444 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:21:02,444 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:21:02,444 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:21:02,444 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:21:02,445 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:21:02,445 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:21:02,447 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:21:02,447 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:21:02,447 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:21:02,448 [DEBUG   ] [__main__.run_5_year_projection_test:351] Start of year 2025 - Snapshot head:
                                   employee_id employee_hire_date employee_birth_date employee_role  employee_gross_compensation employee_termination_date  active  employee_deferral_rate tenure_band
employee_id                                                                                                                                                                                           
DUMMY_EX_181509_000011  DUMMY_EX_181509_000011         2015-04-19          1985-07-17         Staff                     77068.45                       NaT    True                     3.0     5-10yrs
DUMMY_EX_554513_000013  DUMMY_EX_554513_000013         2010-03-31          1974-10-12         Staff                     61305.55                       NaT    True                     0.0      10+yrs
DUMMY_EX_371360_000016  DUMMY_EX_371360_000016         2012-01-10          1959-05-26         Staff                     66909.57                       NaT    True                    10.0      10+yrs
DUMMY_EX_276791_000032  DUMMY_EX_276791_000032         2018-04-15          1991-12-01         Staff                     62780.69                       NaT    True                     4.0     5-10yrs
DUMMY_EX_557534_000035  DUMMY_EX_557534_000035         2007-08-03          1960-08-15         Staff                     72076.83                       NaT    True                     3.0      10+yrs
2025-05-09 17:21:02,449 [DEBUG   ] [__main__.run_5_year_projection_test:352] Start of year 2025 - Event log tail before run:
      event_id event_time employee_id        event_type  value_num value_json  meta
0  prior_evt_B 2024-01-01           B  EVT_CONTRIB_INCR       0.05       <NA>  <NA>
1  prior_evt_C 2024-01-01           C  EVT_CONTRIB_INCR        0.1       <NA>  <NA>
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:21:02,450 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:21:02,451 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:21:02,452 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:21:02,453 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:21:02,454 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:21:02,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:21:02,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:21:02,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:21:02,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:21:02,460 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:21:02,471 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-09 17:21:02,472 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:21:02,474 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-09 17:21:02,475 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:21:02,475 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-09 17:21:02,478 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-09 17:21:02,479 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:21:02,487 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:21:02,488 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,489 [INFO    ] [__main__.run_5_year_projection_test:364] End of year 2025 - EOY Snapshot shape: (158, 11)
2025-05-09 17:21:02,489 [INFO    ] [__main__.run_5_year_projection_test:365] End of year 2025 - Cumulative Event log shape: (340, 7)
2025-05-09 17:21:02,490 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2026 (Index 1) ---
2025-05-09 17:21:02,491 [DEBUG   ] [__main__.run_5_year_projection_test:351] Start of year 2026 - Snapshot head:
                                   employee_id employee_hire_date employee_birth_date employee_role  employee_gross_compensation employee_termination_date  active  employee_deferral_rate tenure_band  current_comp  term_date
employee_id                                                                                                                                                                                                                    
DUMMY_EX_181509_000011  DUMMY_EX_181509_000011         2015-04-19          1985-07-17         Staff                     77068.45                       NaT    True                     3.0     5-10yrs          0.05        NaT
DUMMY_EX_554513_000013  DUMMY_EX_554513_000013         2010-03-31          1974-10-12         Staff                     61305.55                       NaT    True                     0.0      10+yrs          0.05        NaT
DUMMY_EX_371360_000016  DUMMY_EX_371360_000016         2012-01-10          1959-05-26         Staff                     66909.57                       NaT    True                    10.0      10+yrs          0.05        NaT
DUMMY_EX_276791_000032  DUMMY_EX_276791_000032         2018-04-15          1991-12-01         Staff                     62780.69                       NaT    True                     4.0     5-10yrs          0.05        NaT
DUMMY_EX_557534_000035  DUMMY_EX_557534_000035         2007-08-03          1960-08-15         Staff                     72076.83                       NaT   False                     3.0      10+yrs          0.05 2025-05-13
2025-05-09 17:21:02,492 [DEBUG   ] [__main__.run_5_year_projection_test:352] Start of year 2026 - Event log tail before run:
    event_id event_time   employee_id event_type  value_num value_json                     meta
335     <NA> 2025-08-15  NH_2025_0004       comp    50000.0        NaN  {"initial_comp": 50000}
336     <NA> 2025-07-07  NH_2025_0005       comp    60000.0        NaN  {"initial_comp": 60000}
337     <NA> 2025-11-27  NH_2025_0006       comp    60000.0        NaN  {"initial_comp": 60000}
338     <NA> 2025-04-04  NH_2025_0007       comp    50000.0        NaN  {"initial_comp": 50000}
339     <NA> 2025-12-28  NH_2025_0008       comp    60000.0        NaN  {"initial_comp": 60000}
2025-05-09 17:21:02,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=40, service_months=129
2025-05-09 17:21:02,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=51, service_months=190
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=66, service_months=168
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=34, service_months=93
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=65, service_months=221
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=29, service_months=57
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=46, service_months=198
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=69, service_months=182
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=34, service_months=117
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=33, service_months=68
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=65, service_months=198
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=58, service_months=321
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=51, service_months=50
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=58, service_months=95
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=40, service_months=90
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=66, service_months=181
2025-05-09 17:21:02,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=43, service_months=52
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=45, service_months=152
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=51, service_months=181
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=70, service_months=48
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=60, service_months=38
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=51, service_months=40
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=33, service_months=46
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=46, service_months=43
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=46, service_months=46
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=57, service_months=46
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=45, service_months=37
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=60, service_months=43
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=32, service_months=47
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=49, service_months=45
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=42, service_months=38
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=61, service_months=25
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=44, service_months=31
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=40, service_months=30
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=67, service_months=29
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=54, service_months=26
2025-05-09 17:21:02,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=48, service_months=36
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=66, service_months=36
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=50, service_months=33
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=31, service_months=36
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=55, service_months=25
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=35, service_months=25
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=60, service_months=30
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=57, service_months=25
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=62, service_months=32
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=49, service_months=28
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=47, service_months=34
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=48, service_months=28
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=33, service_months=34
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=40, service_months=13
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=46, service_months=17
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=45, service_months=19
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=40, service_months=13
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=51, service_months=14
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=35, service_months=24
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=44, service_months=19
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=53, service_months=20
2025-05-09 17:21:02,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=59, service_months=20
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=27, service_months=13
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=52, service_months=17
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=42, service_months=20
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=32, service_months=22
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=27, service_months=15
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=37, service_months=18
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=47, service_months=23
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=42, service_months=20
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=35, service_months=15
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=47, service_months=13
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=27, service_months=18
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=63, service_months=19
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=41, service_months=15
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=61, service_months=22
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=51, service_months=22
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=71, service_months=22
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=69, service_months=13
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=34, service_months=18
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=67, service_months=14
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=45, service_months=18
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=38, service_months=23
2025-05-09 17:21:02,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=51, service_months=18
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=36, service_months=24
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=32, service_months=17
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=58, service_months=24
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=34, service_months=17
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=37, service_months=19
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=50, service_months=24
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=53, service_months=16
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=25, service_months=22
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=60, service_months=22
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=21, service_months=15
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=28, service_months=14
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=32, service_months=16
2025-05-09 17:21:02,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=43, service_months=21
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=34, service_months=19
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=40, service_months=14
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=49, service_months=13
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=27, service_months=19
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=44, service_months=14
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=57, service_months=19
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=43, service_months=32
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=52, service_months=31
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=36, service_months=27
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=34, service_months=33
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=51, service_months=34
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=38, service_months=35
2025-05-09 17:21:02,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=42, service_months=25
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=58, service_months=32
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=58, service_months=138
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=45, service_months=75
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=45, service_months=31
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=25, service_months=28
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=42, service_months=36
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=49, service_months=25
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=38, service_months=41
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=52, service_months=33
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=41, service_months=29
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=46, service_months=32
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=40, service_months=34
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=43, service_months=29
2025-05-09 17:21:02,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=55, service_months=41
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=43, service_months=41
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=38, service_months=65
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=53, service_months=31
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=59, service_months=31
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=33, service_months=25
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=47, service_months=47
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=42, service_months=29
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=39, service_months=33
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=27, service_months=25
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=59, service_months=44
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=36, service_months=36
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=57, service_months=29
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=66, service_months=202
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=51, service_months=148
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=45, service_months=25
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=53, service_months=27
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=64, service_months=81
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=50, service_months=156
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=47, service_months=133
2025-05-09 17:21:02,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=30, service_months=34
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=46, service_months=30
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=26, service_months=32
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=58, service_months=180
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=38, service_months=145
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=64, service_months=44
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=40, service_months=42
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=62, service_months=34
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=34, service_months=32
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,503 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:21:02,508 [INFO    ] [cost_model.engines.term.run:54] [TERM.RUN YR=2026] Snapshot EOY active count (passed to term.run): 158
2025-05-09 17:21:02,508 [INFO    ] [cost_model.engines.term.run:55] [TERM.RUN YR=2026] Number of active employees for termination consideration (n): 158
2025-05-09 17:21:02,508 [INFO    ] [cost_model.engines.term.run:56] [TERM.RUN YR=2026] as_of date for filtering: 2025-01-01 00:00:00
2025-05-09 17:21:02,509 [INFO    ] [cost_model.engines.term.run:70] [TERM.RUN YR=2026] DataFrame 'df' shape after merge: (158, 12)
2025-05-09 17:21:02,509 [INFO    ] [cost_model.engines.term.run:71] [TERM.RUN YR=2026] Sample of term_rate in df (first 5):
   term_rate
0       0.15
1       0.15
2       0.15
3       0.15
4       0.15
2025-05-09 17:21:02,510 [INFO    ] [cost_model.engines.term.run:72] [TERM.RUN YR=2026] NaN term_rates after merge: 8
2025-05-09 17:21:02,510 [INFO    ] [cost_model.engines.term.run:88] [TERM.RUN YR=2026] Probabilistic mode. Probs array sample (first 5): [0.15 0.15 0.15 0.15 0.15]
2025-05-09 17:21:02,510 [INFO    ] [cost_model.engines.term.run:89] [TERM.RUN YR=2026] Number of losers: 29
2025-05-09 17:21:02,510 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 179 new events...
2025-05-09 17:21:02,511 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:21:02,512 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 127 compensation updates to active employees.
2025-05-09 17:21:02,513 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 29 termination updates to existing employees.
2025-05-09 17:21:02,514 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,516 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:21:02,517 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:21:02,517 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:21:02,518 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,520 [INFO    ] [__main__.run_5_year_projection_test:364] End of year 2026 - EOY Snapshot shape: (158, 11)
2025-05-09 17:21:02,520 [INFO    ] [__main__.run_5_year_projection_test:365] End of year 2026 - Cumulative Event log shape: (685, 7)
2025-05-09 17:21:02,521 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2027 (Index 2) ---
2025-05-09 17:21:02,522 [DEBUG   ] [__main__.run_5_year_projection_test:351] Start of year 2027 - Snapshot head:
                                   employee_id employee_hire_date employee_birth_date employee_role  employee_gross_compensation employee_termination_date  active  employee_deferral_rate tenure_band  current_comp  term_date
employee_id                                                                                                                                                                                                                    
DUMMY_EX_181509_000011  DUMMY_EX_181509_000011         2015-04-19          1985-07-17         Staff                     77068.45                       NaT    True                     3.0     5-10yrs          0.05        NaT
DUMMY_EX_554513_000013  DUMMY_EX_554513_000013         2010-03-31          1974-10-12         Staff                     61305.55                       NaT   False                     0.0      10+yrs          0.05 2025-12-08
DUMMY_EX_371360_000016  DUMMY_EX_371360_000016         2012-01-10          1959-05-26         Staff                     66909.57                       NaT    True                    10.0      10+yrs          0.05        NaT
DUMMY_EX_276791_000032  DUMMY_EX_276791_000032         2018-04-15          1991-12-01         Staff                     62780.69                       NaT    True                     4.0     5-10yrs          0.05        NaT
DUMMY_EX_557534_000035  DUMMY_EX_557534_000035         2007-08-03          1960-08-15         Staff                     72076.83                       NaT   False                     3.0      10+yrs          0.05 2025-05-13
2025-05-09 17:21:02,523 [DEBUG   ] [__main__.run_5_year_projection_test:352] Start of year 2027 - Event log tail before run:
    event_id event_time   employee_id event_type  value_num value_json                     meta
680     <NA> 2025-07-10  NH_2025_0004       comp    50000.0        NaN  {"initial_comp": 50000}
681     <NA> 2025-09-23  NH_2025_0005       comp    50000.0        NaN  {"initial_comp": 50000}
682     <NA> 2025-10-06  NH_2025_0006       comp    50000.0        NaN  {"initial_comp": 50000}
683     <NA> 2025-12-02  NH_2025_0007       comp    50000.0        NaN  {"initial_comp": 50000}
684     <NA> 2025-10-19  NH_2025_0008       comp    50000.0        NaN  {"initial_comp": 50000}
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=41, service_months=141
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=52, service_months=202
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=67, service_months=180
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=35, service_months=105
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=66, service_months=233
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=30, service_months=69
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=47, service_months=210
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=70, service_months=194
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=35, service_months=129
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=34, service_months=80
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=66, service_months=210
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=59, service_months=333
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=52, service_months=62
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=59, service_months=107
2025-05-09 17:21:02,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=41, service_months=102
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=67, service_months=193
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=44, service_months=64
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=46, service_months=164
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=52, service_months=193
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=71, service_months=60
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=61, service_months=50
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=52, service_months=52
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=34, service_months=58
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=47, service_months=55
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=47, service_months=58
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=58, service_months=58
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=46, service_months=49
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=61, service_months=55
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=33, service_months=59
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=50, service_months=57
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=43, service_months=50
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=62, service_months=37
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=45, service_months=43
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=41, service_months=42
2025-05-09 17:21:02,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=68, service_months=41
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=55, service_months=38
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=49, service_months=48
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=67, service_months=48
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=51, service_months=45
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=32, service_months=48
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=56, service_months=37
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=36, service_months=37
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=61, service_months=42
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=58, service_months=37
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=63, service_months=44
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=50, service_months=40
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=48, service_months=46
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=49, service_months=40
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=34, service_months=46
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=41, service_months=25
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=47, service_months=29
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=46, service_months=31
2025-05-09 17:21:02,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=41, service_months=25
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=52, service_months=26
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=36, service_months=36
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=45, service_months=31
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=54, service_months=32
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=60, service_months=32
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=28, service_months=25
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=53, service_months=29
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=43, service_months=32
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=33, service_months=34
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=28, service_months=27
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=38, service_months=30
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=48, service_months=35
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=43, service_months=32
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=36, service_months=27
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=48, service_months=25
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=28, service_months=30
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=64, service_months=31
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=42, service_months=27
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=62, service_months=34
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=52, service_months=34
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=72, service_months=34
2025-05-09 17:21:02,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=70, service_months=25
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=35, service_months=30
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=68, service_months=26
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=46, service_months=30
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=39, service_months=35
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=52, service_months=30
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=37, service_months=36
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=33, service_months=29
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=59, service_months=36
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=35, service_months=29
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=38, service_months=31
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=51, service_months=36
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=54, service_months=28
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=26, service_months=34
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=61, service_months=34
2025-05-09 17:21:02,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=22, service_months=27
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=29, service_months=26
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=33, service_months=28
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=44, service_months=33
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=35, service_months=31
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=41, service_months=26
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=50, service_months=25
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=28, service_months=31
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=45, service_months=26
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=58, service_months=31
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=44, service_months=44
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=53, service_months=43
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=37, service_months=39
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=35, service_months=45
2025-05-09 17:21:02,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=52, service_months=46
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=39, service_months=47
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=43, service_months=37
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=59, service_months=44
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=59, service_months=150
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=46, service_months=87
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=46, service_months=43
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=26, service_months=40
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=43, service_months=48
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=50, service_months=37
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=39, service_months=53
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=53, service_months=45
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=42, service_months=41
2025-05-09 17:21:02,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=47, service_months=44
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=41, service_months=46
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=44, service_months=41
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=56, service_months=53
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=44, service_months=53
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=39, service_months=77
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=54, service_months=43
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=60, service_months=43
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=34, service_months=37
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=48, service_months=59
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=43, service_months=41
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=40, service_months=45
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=28, service_months=37
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=60, service_months=56
2025-05-09 17:21:02,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=37, service_months=48
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=58, service_months=41
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=67, service_months=214
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=52, service_months=160
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=46, service_months=37
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=54, service_months=39
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=65, service_months=93
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=51, service_months=168
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=48, service_months=145
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=31, service_months=46
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=47, service_months=42
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=27, service_months=44
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=59, service_months=192
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=39, service_months=157
2025-05-09 17:21:02,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=65, service_months=56
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=41, service_months=54
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=63, service_months=46
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=35, service_months=44
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,534 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:21:02,540 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 176 new events...
2025-05-09 17:21:02,541 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:21:02,543 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 102 compensation updates to active employees.
2025-05-09 17:21:02,544 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 26 termination updates to existing employees.
2025-05-09 17:21:02,544 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,547 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:21:02,548 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:21:02,549 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:21:02,550 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,551 [INFO    ] [__main__.run_5_year_projection_test:364] End of year 2027 - EOY Snapshot shape: (158, 11)
2025-05-09 17:21:02,551 [INFO    ] [__main__.run_5_year_projection_test:365] End of year 2027 - Cumulative Event log shape: (1027, 7)
2025-05-09 17:21:02,553 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2028 (Index 3) ---
2025-05-09 17:21:02,554 [DEBUG   ] [__main__.run_5_year_projection_test:351] Start of year 2028 - Snapshot head:
                                   employee_id employee_hire_date employee_birth_date employee_role  employee_gross_compensation employee_termination_date  active  employee_deferral_rate tenure_band  current_comp  term_date
employee_id                                                                                                                                                                                                                    
DUMMY_EX_181509_000011  DUMMY_EX_181509_000011         2015-04-19          1985-07-17         Staff                     77068.45                       NaT    True                     3.0     5-10yrs          0.05        NaT
DUMMY_EX_554513_000013  DUMMY_EX_554513_000013         2010-03-31          1974-10-12         Staff                     61305.55                       NaT   False                     0.0      10+yrs          0.05 2025-12-08
DUMMY_EX_371360_000016  DUMMY_EX_371360_000016         2012-01-10          1959-05-26         Staff                     66909.57                       NaT    True                    10.0      10+yrs          0.05        NaT
DUMMY_EX_276791_000032  DUMMY_EX_276791_000032         2018-04-15          1991-12-01         Staff                     62780.69                       NaT   False                     4.0     5-10yrs          0.05 2025-09-24
DUMMY_EX_557534_000035  DUMMY_EX_557534_000035         2007-08-03          1960-08-15         Staff                     72076.83                       NaT   False                     3.0      10+yrs          0.05 2025-04-25
2025-05-09 17:21:02,554 [DEBUG   ] [__main__.run_5_year_projection_test:352] Start of year 2028 - Event log tail before run:
     event_id event_time   employee_id event_type  value_num value_json                     meta
1022     <NA> 2025-03-02  NH_2025_0004       comp    50000.0        NaN  {"initial_comp": 50000}
1023     <NA> 2025-06-02  NH_2025_0005       comp    50000.0        NaN  {"initial_comp": 50000}
1024     <NA> 2025-11-02  NH_2025_0006       comp    50000.0        NaN  {"initial_comp": 50000}
1025     <NA> 2025-12-02  NH_2025_0007       comp    50000.0        NaN  {"initial_comp": 50000}
1026     <NA> 2025-12-28  NH_2025_0008       comp    50000.0        NaN  {"initial_comp": 50000}
2025-05-09 17:21:02,555 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=42, service_months=153
2025-05-09 17:21:02,555 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=53, service_months=214
2025-05-09 17:21:02,555 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=68, service_months=192
2025-05-09 17:21:02,555 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=36, service_months=117
2025-05-09 17:21:02,555 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=67, service_months=245
2025-05-09 17:21:02,555 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=31, service_months=81
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=48, service_months=222
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=71, service_months=206
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=36, service_months=141
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=35, service_months=92
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=67, service_months=222
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=60, service_months=345
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=53, service_months=74
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=60, service_months=119
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=42, service_months=114
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=68, service_months=205
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=45, service_months=76
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=47, service_months=176
2025-05-09 17:21:02,556 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=53, service_months=205
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=72, service_months=72
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=62, service_months=62
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=53, service_months=64
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=35, service_months=70
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=48, service_months=67
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=48, service_months=70
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=59, service_months=70
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=47, service_months=61
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=62, service_months=67
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=34, service_months=71
2025-05-09 17:21:02,557 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=51, service_months=69
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=44, service_months=62
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=63, service_months=49
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=46, service_months=55
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=42, service_months=54
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=69, service_months=53
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=56, service_months=50
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=50, service_months=60
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=68, service_months=60
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=52, service_months=57
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=33, service_months=60
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=57, service_months=49
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=37, service_months=49
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=62, service_months=54
2025-05-09 17:21:02,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=59, service_months=49
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=64, service_months=56
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=51, service_months=52
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=49, service_months=58
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=50, service_months=52
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=35, service_months=58
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=42, service_months=37
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=48, service_months=41
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=47, service_months=43
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=42, service_months=37
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=53, service_months=38
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=37, service_months=48
2025-05-09 17:21:02,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=46, service_months=43
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=55, service_months=44
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=61, service_months=44
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=29, service_months=37
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=54, service_months=41
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=44, service_months=44
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=34, service_months=46
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=29, service_months=39
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=39, service_months=42
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=49, service_months=47
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=44, service_months=44
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=37, service_months=39
2025-05-09 17:21:02,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=49, service_months=37
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=29, service_months=42
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=65, service_months=43
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=43, service_months=39
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=63, service_months=46
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=53, service_months=46
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=73, service_months=46
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=71, service_months=37
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=36, service_months=42
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=69, service_months=38
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=47, service_months=42
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=40, service_months=47
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=53, service_months=42
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=38, service_months=48
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=34, service_months=41
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=60, service_months=48
2025-05-09 17:21:02,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=36, service_months=41
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=39, service_months=43
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=52, service_months=48
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=55, service_months=40
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=27, service_months=46
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=62, service_months=46
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=23, service_months=39
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=30, service_months=38
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=34, service_months=40
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=45, service_months=45
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=36, service_months=43
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=42, service_months=38
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=51, service_months=37
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=29, service_months=43
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=46, service_months=38
2025-05-09 17:21:02,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=59, service_months=43
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=45, service_months=56
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=54, service_months=55
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=38, service_months=51
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=36, service_months=57
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=53, service_months=58
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=40, service_months=59
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=44, service_months=49
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=60, service_months=56
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=60, service_months=162
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=47, service_months=99
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=47, service_months=55
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=27, service_months=52
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=44, service_months=60
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=51, service_months=49
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:21:02,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=40, service_months=65
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=54, service_months=57
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=43, service_months=53
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=48, service_months=56
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=42, service_months=58
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=45, service_months=53
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=57, service_months=65
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=45, service_months=65
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=40, service_months=89
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=55, service_months=55
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=61, service_months=55
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=35, service_months=49
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=49, service_months=71
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=44, service_months=53
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=41, service_months=57
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=29, service_months=49
2025-05-09 17:21:02,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=61, service_months=68
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=38, service_months=60
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=59, service_months=53
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=68, service_months=226
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=53, service_months=172
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=47, service_months=49
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=55, service_months=51
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=66, service_months=105
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=52, service_months=180
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=49, service_months=157
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=32, service_months=58
2025-05-09 17:21:02,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=48, service_months=54
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=28, service_months=56
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=60, service_months=204
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=40, service_months=169
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=66, service_months=68
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=42, service_months=66
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=64, service_months=58
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=36, service_months=56
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,569 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:21:02,575 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 173 new events...
2025-05-09 17:21:02,576 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:21:02,577 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 86 compensation updates to active employees.
2025-05-09 17:21:02,578 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:21:02,578 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,580 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:21:02,582 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:21:02,582 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:21:02,583 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,584 [INFO    ] [__main__.run_5_year_projection_test:364] End of year 2028 - EOY Snapshot shape: (158, 11)
2025-05-09 17:21:02,584 [INFO    ] [__main__.run_5_year_projection_test:365] End of year 2028 - Cumulative Event log shape: (1366, 7)
2025-05-09 17:21:02,585 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2029 (Index 4) ---
2025-05-09 17:21:02,586 [DEBUG   ] [__main__.run_5_year_projection_test:351] Start of year 2029 - Snapshot head:
                                   employee_id employee_hire_date employee_birth_date employee_role  employee_gross_compensation employee_termination_date  active  employee_deferral_rate tenure_band  current_comp  term_date
employee_id                                                                                                                                                                                                                    
DUMMY_EX_181509_000011  DUMMY_EX_181509_000011         2015-04-19          1985-07-17         Staff                     77068.45                       NaT    True                     3.0     5-10yrs          0.05        NaT
DUMMY_EX_554513_000013  DUMMY_EX_554513_000013         2010-03-31          1974-10-12         Staff                     61305.55                       NaT   False                     0.0      10+yrs          0.05 2025-12-08
DUMMY_EX_371360_000016  DUMMY_EX_371360_000016         2012-01-10          1959-05-26         Staff                     66909.57                       NaT    True                    10.0      10+yrs          0.05        NaT
DUMMY_EX_276791_000032  DUMMY_EX_276791_000032         2018-04-15          1991-12-01         Staff                     62780.69                       NaT   False                     4.0     5-10yrs          0.05 2025-01-10
DUMMY_EX_557534_000035  DUMMY_EX_557534_000035         2007-08-03          1960-08-15         Staff                     72076.83                       NaT   False                     3.0      10+yrs          0.05 2025-04-25
2025-05-09 17:21:02,587 [DEBUG   ] [__main__.run_5_year_projection_test:352] Start of year 2029 - Event log tail before run:
     event_id event_time   employee_id event_type  value_num value_json                     meta
1361     <NA> 2025-10-12  NH_2025_0004       comp    60000.0        NaN  {"initial_comp": 60000}
1362     <NA> 2025-07-07  NH_2025_0005       comp    50000.0        NaN  {"initial_comp": 50000}
1363     <NA> 2025-12-08  NH_2025_0006       comp    50000.0        NaN  {"initial_comp": 50000}
1364     <NA> 2025-06-08  NH_2025_0007       comp    50000.0        NaN  {"initial_comp": 50000}
1365     <NA> 2025-02-20  NH_2025_0008       comp    50000.0        NaN  {"initial_comp": 50000}
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=43, service_months=165
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=54, service_months=226
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=69, service_months=204
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=37, service_months=129
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=68, service_months=257
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=32, service_months=93
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=49, service_months=234
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=72, service_months=218
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=37, service_months=153
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=36, service_months=104
2025-05-09 17:21:02,588 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=68, service_months=234
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=61, service_months=357
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=54, service_months=86
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=61, service_months=131
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=43, service_months=126
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=69, service_months=217
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=46, service_months=88
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=48, service_months=188
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=54, service_months=217
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=73, service_months=84
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=63, service_months=74
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=54, service_months=76
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=36, service_months=82
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=49, service_months=79
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=49, service_months=82
2025-05-09 17:21:02,589 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=60, service_months=82
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=48, service_months=73
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=63, service_months=79
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=35, service_months=83
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=52, service_months=81
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=45, service_months=74
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=64, service_months=61
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=47, service_months=67
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=43, service_months=66
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=70, service_months=65
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=57, service_months=62
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=51, service_months=72
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=69, service_months=72
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=53, service_months=69
2025-05-09 17:21:02,590 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=34, service_months=72
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=58, service_months=61
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=38, service_months=61
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=63, service_months=66
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=60, service_months=61
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=65, service_months=68
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=52, service_months=64
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=50, service_months=70
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=51, service_months=64
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=36, service_months=70
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=43, service_months=49
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=49, service_months=53
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=48, service_months=55
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=43, service_months=49
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=54, service_months=50
2025-05-09 17:21:02,591 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=38, service_months=60
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=47, service_months=55
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=56, service_months=56
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=62, service_months=56
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=30, service_months=49
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=55, service_months=53
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=45, service_months=56
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=35, service_months=58
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=30, service_months=51
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=40, service_months=54
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=50, service_months=59
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=45, service_months=56
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=38, service_months=51
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=50, service_months=49
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=30, service_months=54
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=66, service_months=55
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=44, service_months=51
2025-05-09 17:21:02,592 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=64, service_months=58
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=54, service_months=58
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=74, service_months=58
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=72, service_months=49
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=37, service_months=54
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=70, service_months=50
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=48, service_months=54
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=41, service_months=59
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=54, service_months=54
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=39, service_months=60
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=35, service_months=53
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=61, service_months=60
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=37, service_months=53
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=40, service_months=55
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=53, service_months=60
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=56, service_months=52
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=28, service_months=58
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=63, service_months=58
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=24, service_months=51
2025-05-09 17:21:02,593 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=31, service_months=50
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=35, service_months=52
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=46, service_months=57
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=37, service_months=55
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=43, service_months=50
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=52, service_months=49
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=30, service_months=55
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=47, service_months=50
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=60, service_months=55
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=46, service_months=68
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=55, service_months=67
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=39, service_months=63
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=37, service_months=69
2025-05-09 17:21:02,594 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=54, service_months=70
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=41, service_months=71
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=45, service_months=61
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=61, service_months=68
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=61, service_months=174
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=48, service_months=111
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=48, service_months=67
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=28, service_months=64
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=45, service_months=72
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=52, service_months=61
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=41, service_months=77
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=55, service_months=69
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=44, service_months=65
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=49, service_months=68
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=43, service_months=70
2025-05-09 17:21:02,595 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=46, service_months=65
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=58, service_months=77
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=46, service_months=77
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=41, service_months=101
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=56, service_months=67
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=62, service_months=67
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=36, service_months=61
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=50, service_months=83
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=45, service_months=65
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=42, service_months=69
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=30, service_months=61
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=62, service_months=80
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=39, service_months=72
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=60, service_months=65
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=69, service_months=238
2025-05-09 17:21:02,596 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=54, service_months=184
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=48, service_months=61
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=56, service_months=63
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=67, service_months=117
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=53, service_months=192
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=50, service_months=169
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=33, service_months=70
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=49, service_months=66
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=29, service_months=68
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=61, service_months=216
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=41, service_months=181
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=67, service_months=80
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=43, service_months=78
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=65, service_months=70
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=37, service_months=68
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,597 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,598 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,598 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:21:02,598 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:21:02,599 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:21:02,605 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 182 new events...
2025-05-09 17:21:02,606 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:21:02,607 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 71 compensation updates to active employees.
2025-05-09 17:21:02,608 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 32 termination updates to existing employees.
2025-05-09 17:21:02,609 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,611 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:21:02,612 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:21:02,613 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:21:02,613 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:21:02,615 [INFO    ] [__main__.run_5_year_projection_test:364] End of year 2029 - EOY Snapshot shape: (158, 11)
2025-05-09 17:21:02,615 [INFO    ] [__main__.run_5_year_projection_test:365] End of year 2029 - Cumulative Event log shape: (1714, 7)
2025-05-09 17:21:02,616 [INFO    ] [__main__.run_5_year_projection_test:402] 
--- Projection Summary ---
2025-05-09 17:21:02,622 [INFO    ] [__main__.run_5_year_projection_test:408] Projection summary and final event log saved to: output_dev/projection_run_output
2025-05-09 17:21:02,630 [DEBUG   ] [matplotlib.pyplot.switch_backend:487] Loaded backend macosx version unknown.
2025-05-09 17:21:02,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-09 17:21:02,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:21:02,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:21:02,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,705 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:21:02,706 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,707 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,708 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,709 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,710 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,752 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,753 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,754 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,755 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:21:02,756 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,757 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,758 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:21:02,759 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,760 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:21:02,761 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:21:02,791 [INFO    ] [__main__.run_5_year_projection_test:434] Projection plot saved to: output_dev/projection_run_output/headcount_projection.png
2025-05-09 17:30:05,821 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:30:05,825 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:30:05,825 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:30:05,825 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:30:05,825 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:30:05,825 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:30:05,871 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:30:05,876 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:30:05,876 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:30:05,877 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:30:05,877 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:30:05,877 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:30:05,878 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:30:05,878 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:30:05,879 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:30:05,880 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:30:05,880 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:30:05,880 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-09 17:30:05,881 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:30:05,882 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:30:05,882 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:30:05,883 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:30:05,884 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:30:05,885 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:30:05,886 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:30:05,887 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:30:05,888 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:30:05,889 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:30:05,890 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:30:05,891 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:30:05,892 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:30:05,892 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:30:05,894 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:30:05,902 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-09 17:30:05,904 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:30:05,905 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-09 17:30:05,906 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:30:05,906 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-09 17:30:05,909 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-09 17:30:05,910 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:30:05,916 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:30:05,917 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:05,918 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2025 - Snapshot shape: (158, 11), Active: 135
2025-05-09 17:30:05,919 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2026 (Index 1) ---
2025-05-09 17:30:05,919 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2026 - Snapshot shape: (158, 11), Active: 135
2025-05-09 17:30:05,920 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2026:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
12  2026         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
13  2026         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
14  2026         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
15  2026       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
16  2026       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
17  2026       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
18  2026         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
19  2026       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
20  2026     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
21  2026         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
22  2026       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
23  2026     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=40, service_months=129
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=51, service_months=190
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=66, service_months=168
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=34, service_months=93
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=65, service_months=221
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=29, service_months=57
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=46, service_months=198
2025-05-09 17:30:05,921 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=69, service_months=182
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=34, service_months=117
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=33, service_months=68
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=65, service_months=198
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=58, service_months=321
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=51, service_months=50
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=58, service_months=95
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=40, service_months=90
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=66, service_months=181
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=43, service_months=52
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=45, service_months=152
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=51, service_months=181
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=70, service_months=48
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=60, service_months=38
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=51, service_months=40
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=33, service_months=46
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=46, service_months=43
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=46, service_months=46
2025-05-09 17:30:05,922 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=57, service_months=46
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=45, service_months=37
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=60, service_months=43
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=32, service_months=47
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=49, service_months=45
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=42, service_months=38
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=61, service_months=25
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=44, service_months=31
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=40, service_months=30
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=67, service_months=29
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=54, service_months=26
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=48, service_months=36
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=66, service_months=36
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=50, service_months=33
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=31, service_months=36
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=55, service_months=25
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=35, service_months=25
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=60, service_months=30
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=57, service_months=25
2025-05-09 17:30:05,923 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=62, service_months=32
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=49, service_months=28
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=47, service_months=34
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=48, service_months=28
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=33, service_months=34
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=40, service_months=13
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=46, service_months=17
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=45, service_months=19
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=40, service_months=13
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=51, service_months=14
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=35, service_months=24
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=44, service_months=19
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=53, service_months=20
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=59, service_months=20
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=27, service_months=13
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=52, service_months=17
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=42, service_months=20
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=32, service_months=22
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=27, service_months=15
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=37, service_months=18
2025-05-09 17:30:05,924 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=47, service_months=23
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=42, service_months=20
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=35, service_months=15
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=47, service_months=13
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=27, service_months=18
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=63, service_months=19
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=41, service_months=15
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=61, service_months=22
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=51, service_months=22
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=71, service_months=22
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=69, service_months=13
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=34, service_months=18
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=67, service_months=14
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=45, service_months=18
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=38, service_months=23
2025-05-09 17:30:05,925 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=51, service_months=18
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=36, service_months=24
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=32, service_months=17
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=58, service_months=24
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=34, service_months=17
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=37, service_months=19
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=50, service_months=24
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=53, service_months=16
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=25, service_months=22
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=60, service_months=22
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=21, service_months=15
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=28, service_months=14
2025-05-09 17:30:05,926 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=32, service_months=16
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=43, service_months=21
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=34, service_months=19
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=40, service_months=14
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=49, service_months=13
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=27, service_months=19
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=44, service_months=14
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=57, service_months=19
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=43, service_months=32
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=52, service_months=31
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=36, service_months=27
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=34, service_months=33
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=51, service_months=34
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=38, service_months=35
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=42, service_months=25
2025-05-09 17:30:05,927 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=58, service_months=32
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=58, service_months=138
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=45, service_months=75
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=45, service_months=31
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=25, service_months=28
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=42, service_months=36
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=49, service_months=25
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=38, service_months=41
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=52, service_months=33
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=41, service_months=29
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=46, service_months=32
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=40, service_months=34
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=43, service_months=29
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=55, service_months=41
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=43, service_months=41
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=38, service_months=65
2025-05-09 17:30:05,928 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=53, service_months=31
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=59, service_months=31
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=33, service_months=25
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=47, service_months=47
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=42, service_months=29
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=39, service_months=33
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=27, service_months=25
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=59, service_months=44
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=36, service_months=36
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=57, service_months=29
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=66, service_months=202
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=51, service_months=148
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=45, service_months=25
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=53, service_months=27
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=64, service_months=81
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=50, service_months=156
2025-05-09 17:30:05,929 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=47, service_months=133
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=30, service_months=34
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=46, service_months=30
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=26, service_months=32
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=58, service_months=180
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=38, service_months=145
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=64, service_months=44
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=40, service_months=42
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=62, service_months=34
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=34, service_months=32
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,930 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,931 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,932 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:30:05,937 [INFO    ] [cost_model.engines.term.run:54] [TERM.RUN YR=2026] Snapshot EOY active count (passed to term.run): 158
2025-05-09 17:30:05,937 [INFO    ] [cost_model.engines.term.run:55] [TERM.RUN YR=2026] Number of active employees for termination consideration (n): 158
2025-05-09 17:30:05,937 [INFO    ] [cost_model.engines.term.run:56] [TERM.RUN YR=2026] as_of date for filtering: 2025-01-01 00:00:00
2025-05-09 17:30:05,938 [INFO    ] [cost_model.engines.term.run:70] [TERM.RUN YR=2026] DataFrame 'df' shape after merge: (158, 12)
2025-05-09 17:30:05,938 [INFO    ] [cost_model.engines.term.run:71] [TERM.RUN YR=2026] Sample of term_rate in df (first 5):
   term_rate
0       0.15
1       0.15
2       0.15
3       0.15
4       0.15
2025-05-09 17:30:05,938 [INFO    ] [cost_model.engines.term.run:72] [TERM.RUN YR=2026] NaN term_rates after merge: 8
2025-05-09 17:30:05,939 [INFO    ] [cost_model.engines.term.run:88] [TERM.RUN YR=2026] Probabilistic mode. Probs array sample (first 5): [0.15 0.15 0.15 0.15 0.15]
2025-05-09 17:30:05,939 [INFO    ] [cost_model.engines.term.run:89] [TERM.RUN YR=2026] Number of losers: 29
2025-05-09 17:30:05,939 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 179 new events...
2025-05-09 17:30:05,940 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:30:05,941 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 127 compensation updates to active employees.
2025-05-09 17:30:05,941 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 29 termination updates to existing employees.
2025-05-09 17:30:05,942 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:05,944 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:30:05,945 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:30:05,946 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:30:05,947 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:05,948 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2026 - Snapshot shape: (158, 11), Active: 110
2025-05-09 17:30:05,949 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2027 (Index 2) ---
2025-05-09 17:30:05,949 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2027 - Snapshot shape: (158, 11), Active: 110
2025-05-09 17:30:05,950 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2027:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pct                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  cfg
24  2027         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
25  2027         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
26  2027         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
27  2027       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
28  2027       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
29  2027       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
30  2027         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
31  2027       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
32  2027     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
33  2027         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
34  2027       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
35  2027     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:30:05,951 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=41, service_months=141
2025-05-09 17:30:05,951 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=52, service_months=202
2025-05-09 17:30:05,951 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=67, service_months=180
2025-05-09 17:30:05,951 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=35, service_months=105
2025-05-09 17:30:05,951 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=66, service_months=233
2025-05-09 17:30:05,951 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=30, service_months=69
2025-05-09 17:30:05,951 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=47, service_months=210
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=70, service_months=194
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=35, service_months=129
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=34, service_months=80
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=66, service_months=210
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=59, service_months=333
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=52, service_months=62
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=59, service_months=107
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=41, service_months=102
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=67, service_months=193
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=44, service_months=64
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=46, service_months=164
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=52, service_months=193
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=71, service_months=60
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=61, service_months=50
2025-05-09 17:30:05,952 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=52, service_months=52
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=34, service_months=58
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=47, service_months=55
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=47, service_months=58
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=58, service_months=58
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=46, service_months=49
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=61, service_months=55
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=33, service_months=59
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=50, service_months=57
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=43, service_months=50
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=62, service_months=37
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=45, service_months=43
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=41, service_months=42
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=68, service_months=41
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=55, service_months=38
2025-05-09 17:30:05,953 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=49, service_months=48
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=67, service_months=48
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=51, service_months=45
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=32, service_months=48
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=56, service_months=37
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=36, service_months=37
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=61, service_months=42
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=58, service_months=37
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=63, service_months=44
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=50, service_months=40
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=48, service_months=46
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=49, service_months=40
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=34, service_months=46
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=41, service_months=25
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=47, service_months=29
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=46, service_months=31
2025-05-09 17:30:05,954 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=41, service_months=25
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=52, service_months=26
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=36, service_months=36
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=45, service_months=31
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=54, service_months=32
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=60, service_months=32
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=28, service_months=25
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=53, service_months=29
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=43, service_months=32
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=33, service_months=34
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=28, service_months=27
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=38, service_months=30
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=48, service_months=35
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=43, service_months=32
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=36, service_months=27
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=48, service_months=25
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=28, service_months=30
2025-05-09 17:30:05,955 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=64, service_months=31
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=42, service_months=27
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=62, service_months=34
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=52, service_months=34
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=72, service_months=34
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=70, service_months=25
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=35, service_months=30
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=68, service_months=26
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=46, service_months=30
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=39, service_months=35
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=52, service_months=30
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=37, service_months=36
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=33, service_months=29
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=59, service_months=36
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=35, service_months=29
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=38, service_months=31
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=51, service_months=36
2025-05-09 17:30:05,956 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=54, service_months=28
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=26, service_months=34
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=61, service_months=34
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=22, service_months=27
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=29, service_months=26
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=33, service_months=28
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=44, service_months=33
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=35, service_months=31
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=41, service_months=26
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=50, service_months=25
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=28, service_months=31
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=45, service_months=26
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=58, service_months=31
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=44, service_months=44
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=53, service_months=43
2025-05-09 17:30:05,957 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=37, service_months=39
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=35, service_months=45
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=52, service_months=46
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=39, service_months=47
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=43, service_months=37
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=59, service_months=44
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=59, service_months=150
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=46, service_months=87
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=46, service_months=43
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=26, service_months=40
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=43, service_months=48
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=50, service_months=37
2025-05-09 17:30:05,958 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=39, service_months=53
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=53, service_months=45
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=42, service_months=41
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=47, service_months=44
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=41, service_months=46
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=44, service_months=41
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=56, service_months=53
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=44, service_months=53
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=39, service_months=77
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=54, service_months=43
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=60, service_months=43
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=34, service_months=37
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=48, service_months=59
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=43, service_months=41
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=40, service_months=45
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=28, service_months=37
2025-05-09 17:30:05,959 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=60, service_months=56
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=37, service_months=48
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=58, service_months=41
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=67, service_months=214
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=52, service_months=160
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=46, service_months=37
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=54, service_months=39
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=65, service_months=93
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=51, service_months=168
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=48, service_months=145
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=31, service_months=46
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=47, service_months=42
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=27, service_months=44
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=59, service_months=192
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=39, service_months=157
2025-05-09 17:30:05,960 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=65, service_months=56
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=41, service_months=54
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=63, service_months=46
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=35, service_months=44
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,961 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,963 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:30:05,969 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 176 new events...
2025-05-09 17:30:05,970 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:30:05,971 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 102 compensation updates to active employees.
2025-05-09 17:30:05,972 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 26 termination updates to existing employees.
2025-05-09 17:30:05,972 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:05,974 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:30:05,975 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:30:05,976 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:30:05,976 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:05,978 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2027 - Snapshot shape: (158, 11), Active: 94
2025-05-09 17:30:05,979 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2028 (Index 3) ---
2025-05-09 17:30:05,979 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2028 - Snapshot shape: (158, 11), Active: 94
2025-05-09 17:30:05,980 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2028:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pct                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  cfg
36  2028         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
37  2028         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
38  2028         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
39  2028       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
40  2028       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
41  2028       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
42  2028         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
43  2028       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
44  2028     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
45  2028         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
46  2028       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
47  2028     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=42, service_months=153
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=53, service_months=214
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=68, service_months=192
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=36, service_months=117
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=67, service_months=245
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=31, service_months=81
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=48, service_months=222
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=71, service_months=206
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=36, service_months=141
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=35, service_months=92
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=67, service_months=222
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=60, service_months=345
2025-05-09 17:30:05,981 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=53, service_months=74
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=60, service_months=119
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=42, service_months=114
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=68, service_months=205
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=45, service_months=76
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=47, service_months=176
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=53, service_months=205
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=72, service_months=72
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=62, service_months=62
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=53, service_months=64
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=35, service_months=70
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=48, service_months=67
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=48, service_months=70
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=59, service_months=70
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=47, service_months=61
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=62, service_months=67
2025-05-09 17:30:05,982 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=34, service_months=71
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=51, service_months=69
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=44, service_months=62
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=63, service_months=49
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=46, service_months=55
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=42, service_months=54
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=69, service_months=53
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=56, service_months=50
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=50, service_months=60
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=68, service_months=60
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=52, service_months=57
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=33, service_months=60
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=57, service_months=49
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=37, service_months=49
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=62, service_months=54
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=59, service_months=49
2025-05-09 17:30:05,983 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=64, service_months=56
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=51, service_months=52
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=49, service_months=58
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=50, service_months=52
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=35, service_months=58
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=42, service_months=37
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=48, service_months=41
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=47, service_months=43
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=42, service_months=37
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=53, service_months=38
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=37, service_months=48
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=46, service_months=43
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=55, service_months=44
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=61, service_months=44
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=29, service_months=37
2025-05-09 17:30:05,984 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=54, service_months=41
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=44, service_months=44
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=34, service_months=46
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=29, service_months=39
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=39, service_months=42
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=49, service_months=47
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=44, service_months=44
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=37, service_months=39
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=49, service_months=37
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=29, service_months=42
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=65, service_months=43
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=43, service_months=39
2025-05-09 17:30:05,985 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=63, service_months=46
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=53, service_months=46
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=73, service_months=46
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=71, service_months=37
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=36, service_months=42
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=69, service_months=38
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=47, service_months=42
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=40, service_months=47
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=53, service_months=42
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=38, service_months=48
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=34, service_months=41
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=60, service_months=48
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=36, service_months=41
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=39, service_months=43
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=52, service_months=48
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=55, service_months=40
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=27, service_months=46
2025-05-09 17:30:05,986 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=62, service_months=46
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=23, service_months=39
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=30, service_months=38
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=34, service_months=40
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=45, service_months=45
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=36, service_months=43
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=42, service_months=38
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=51, service_months=37
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=29, service_months=43
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=46, service_months=38
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=59, service_months=43
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=45, service_months=56
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=54, service_months=55
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=38, service_months=51
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=36, service_months=57
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=53, service_months=58
2025-05-09 17:30:05,987 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=40, service_months=59
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=44, service_months=49
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=60, service_months=56
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=60, service_months=162
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=47, service_months=99
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=47, service_months=55
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=27, service_months=52
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=44, service_months=60
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=51, service_months=49
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=40, service_months=65
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=54, service_months=57
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=43, service_months=53
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=48, service_months=56
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=42, service_months=58
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=45, service_months=53
2025-05-09 17:30:05,988 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=57, service_months=65
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=45, service_months=65
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=40, service_months=89
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=55, service_months=55
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=61, service_months=55
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=35, service_months=49
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=49, service_months=71
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=44, service_months=53
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=41, service_months=57
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=29, service_months=49
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=61, service_months=68
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=38, service_months=60
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=59, service_months=53
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=68, service_months=226
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=53, service_months=172
2025-05-09 17:30:05,989 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=47, service_months=49
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=55, service_months=51
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=66, service_months=105
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=52, service_months=180
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=49, service_months=157
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=32, service_months=58
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=48, service_months=54
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=28, service_months=56
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=60, service_months=204
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=40, service_months=169
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=66, service_months=68
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=42, service_months=66
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=64, service_months=58
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=36, service_months=56
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,990 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:05,991 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:05,992 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:30:05,998 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 173 new events...
2025-05-09 17:30:05,999 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:30:06,000 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 86 compensation updates to active employees.
2025-05-09 17:30:06,001 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:30:06,001 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:06,003 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:30:06,004 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:30:06,005 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:30:06,006 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:06,007 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2028 - Snapshot shape: (158, 11), Active: 79
2025-05-09 17:30:06,008 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2029 (Index 4) ---
2025-05-09 17:30:06,008 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2029 - Snapshot shape: (158, 11), Active: 79
2025-05-09 17:30:06,009 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2029:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
48  2029         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
49  2029         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
50  2029         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
51  2029       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
52  2029       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
53  2029       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
54  2029         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
55  2029       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
56  2029     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
57  2029         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
58  2029       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
59  2029     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=43, service_months=165
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=54, service_months=226
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=69, service_months=204
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=37, service_months=129
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=68, service_months=257
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=32, service_months=93
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=49, service_months=234
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=72, service_months=218
2025-05-09 17:30:06,010 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=37, service_months=153
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=36, service_months=104
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=68, service_months=234
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=61, service_months=357
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=54, service_months=86
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=61, service_months=131
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=43, service_months=126
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=69, service_months=217
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=46, service_months=88
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=48, service_months=188
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=54, service_months=217
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=73, service_months=84
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=63, service_months=74
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=54, service_months=76
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=36, service_months=82
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=49, service_months=79
2025-05-09 17:30:06,011 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=49, service_months=82
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=60, service_months=82
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=48, service_months=73
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=63, service_months=79
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=35, service_months=83
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=52, service_months=81
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=45, service_months=74
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=64, service_months=61
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=47, service_months=67
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=43, service_months=66
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=70, service_months=65
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=57, service_months=62
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=51, service_months=72
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=69, service_months=72
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=53, service_months=69
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=34, service_months=72
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=58, service_months=61
2025-05-09 17:30:06,012 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=38, service_months=61
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=63, service_months=66
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=60, service_months=61
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=65, service_months=68
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=52, service_months=64
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=50, service_months=70
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=51, service_months=64
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=36, service_months=70
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=43, service_months=49
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=49, service_months=53
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=48, service_months=55
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=43, service_months=49
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=54, service_months=50
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=38, service_months=60
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=47, service_months=55
2025-05-09 17:30:06,013 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=56, service_months=56
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=62, service_months=56
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=30, service_months=49
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=55, service_months=53
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=45, service_months=56
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=35, service_months=58
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=30, service_months=51
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=40, service_months=54
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=50, service_months=59
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=45, service_months=56
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=38, service_months=51
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=50, service_months=49
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=30, service_months=54
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=66, service_months=55
2025-05-09 17:30:06,014 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=44, service_months=51
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=64, service_months=58
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=54, service_months=58
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=74, service_months=58
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=72, service_months=49
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=37, service_months=54
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=70, service_months=50
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=48, service_months=54
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=41, service_months=59
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=54, service_months=54
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=39, service_months=60
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=35, service_months=53
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=61, service_months=60
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=37, service_months=53
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=40, service_months=55
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=53, service_months=60
2025-05-09 17:30:06,015 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=56, service_months=52
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=28, service_months=58
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=63, service_months=58
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=24, service_months=51
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=31, service_months=50
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=35, service_months=52
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=46, service_months=57
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=37, service_months=55
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=43, service_months=50
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=52, service_months=49
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=30, service_months=55
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=47, service_months=50
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=60, service_months=55
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=46, service_months=68
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=55, service_months=67
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=39, service_months=63
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=37, service_months=69
2025-05-09 17:30:06,016 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=54, service_months=70
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=41, service_months=71
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=45, service_months=61
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=61, service_months=68
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=61, service_months=174
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=48, service_months=111
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=48, service_months=67
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=28, service_months=64
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=45, service_months=72
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=52, service_months=61
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=41, service_months=77
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=55, service_months=69
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=44, service_months=65
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=49, service_months=68
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=43, service_months=70
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=46, service_months=65
2025-05-09 17:30:06,017 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=58, service_months=77
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=46, service_months=77
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=41, service_months=101
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=56, service_months=67
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=62, service_months=67
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=36, service_months=61
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=50, service_months=83
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=45, service_months=65
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=42, service_months=69
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=30, service_months=61
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=62, service_months=80
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=39, service_months=72
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=60, service_months=65
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=69, service_months=238
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=54, service_months=184
2025-05-09 17:30:06,018 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=48, service_months=61
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=56, service_months=63
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=67, service_months=117
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=53, service_months=192
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=50, service_months=169
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=33, service_months=70
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=49, service_months=66
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=29, service_months=68
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=61, service_months=216
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=41, service_months=181
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=67, service_months=80
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=43, service_months=78
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=65, service_months=70
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=37, service_months=68
2025-05-09 17:30:06,019 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:30:06,020 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:30:06,021 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:30:06,027 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 182 new events...
2025-05-09 17:30:06,028 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:30:06,029 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 71 compensation updates to active employees.
2025-05-09 17:30:06,030 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 32 termination updates to existing employees.
2025-05-09 17:30:06,034 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:06,036 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:30:06,036 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:30:06,037 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:30:06,038 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:30:06,039 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2029 - Snapshot shape: (158, 11), Active: 60
2025-05-09 17:30:06,040 [INFO    ] [__main__.run_5_year_projection_test:415] 
--- Projection Summary ---
2025-05-09 17:30:06,046 [INFO    ] [__main__.run_5_year_projection_test:421] Projection summary and final event log saved to: output_dev/projection_run_output
2025-05-09 17:30:06,054 [DEBUG   ] [matplotlib.pyplot.switch_backend:487] Loaded backend macosx version unknown.
2025-05-09 17:30:06,136 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,137 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,138 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,139 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,140 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:30:06,141 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,142 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,143 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,144 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,145 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,146 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,147 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,148 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,149 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:30:06,188 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,189 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,190 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,191 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,192 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,193 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,194 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,195 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,196 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,197 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,198 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,199 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,237 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,237 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,237 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,237 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,237 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,237 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,237 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,238 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,238 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,238 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,238 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,239 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:30:06,239 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,239 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,239 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,240 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,240 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,240 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,240 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,241 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,241 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,241 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,241 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,242 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:30:06,243 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:30:06,276 [INFO    ] [__main__.run_5_year_projection_test:447] Projection plot saved to: output_dev/projection_run_output/headcount_projection.png
2025-05-09 17:35:03,623 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:35:03,628 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:35:03,628 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:35:03,628 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:35:03,628 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:35:03,628 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:35:03,684 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:35:03,692 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:35:03,692 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:35:03,692 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:35:03,692 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:35:03,693 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:35:03,693 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:35:03,693 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:35:03,695 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:35:03,695 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:35:03,695 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:35:03,695 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-09 17:35:03,697 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:35:03,698 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:35:03,698 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:35:03,698 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:35:03,699 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:35:03,700 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:35:03,701 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:35:03,702 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:35:03,703 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:35:03,704 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:35:03,705 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:35:03,706 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:35:03,707 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:35:03,708 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:35:03,708 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:35:03,711 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:35:57,328 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:35:57,332 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:35:57,332 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:35:57,332 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:35:57,333 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:35:57,333 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:35:57,378 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:35:57,383 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:35:57,384 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:35:57,384 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:35:57,384 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:35:57,384 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:35:57,385 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:35:57,385 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:35:57,387 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:35:57,387 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:35:57,387 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:35:57,387 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-09 17:35:57,389 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:35:57,390 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:35:57,391 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:35:57,392 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:35:57,393 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:35:57,394 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:35:57,395 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:35:57,396 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:35:57,397 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:35:57,398 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:35:57,401 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:35:57,409 [DEBUG   ] [cost_model.engines.term.run:115] Generated 23 termination events for year 2025.
2025-05-09 17:35:57,410 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-09 17:35:57,411 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:35:57,412 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-09 17:35:57,413 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:35:57,414 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-09 17:35:57,416 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-09 17:35:57,417 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:35:57,424 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:35:57,424 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,426 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2025 - Snapshot shape: (158, 11), Active: 135
2025-05-09 17:35:57,427 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2026 (Index 1) ---
2025-05-09 17:35:57,427 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2026 - Snapshot shape: (158, 11), Active: 135
2025-05-09 17:35:57,428 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2026:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
12  2026         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
13  2026         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
14  2026         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
15  2026       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
16  2026       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
17  2026       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
18  2026         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
19  2026       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
20  2026     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
21  2026         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
22  2026       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
23  2026     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=40, service_months=129
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=51, service_months=190
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=66, service_months=168
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=34, service_months=93
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=65, service_months=221
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=29, service_months=57
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=46, service_months=198
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=69, service_months=182
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=34, service_months=117
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=33, service_months=68
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=65, service_months=198
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=58, service_months=321
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=51, service_months=50
2025-05-09 17:35:57,429 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=58, service_months=95
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=40, service_months=90
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=66, service_months=181
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=43, service_months=52
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=45, service_months=152
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=51, service_months=181
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=70, service_months=48
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=60, service_months=38
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=51, service_months=40
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=33, service_months=46
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=46, service_months=43
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=46, service_months=46
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=57, service_months=46
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=45, service_months=37
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=60, service_months=43
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=32, service_months=47
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=49, service_months=45
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=42, service_months=38
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=61, service_months=25
2025-05-09 17:35:57,430 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=44, service_months=31
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=40, service_months=30
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=67, service_months=29
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=54, service_months=26
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=48, service_months=36
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=66, service_months=36
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=50, service_months=33
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=31, service_months=36
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=55, service_months=25
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=35, service_months=25
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=60, service_months=30
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=57, service_months=25
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=62, service_months=32
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=49, service_months=28
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=47, service_months=34
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=48, service_months=28
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=33, service_months=34
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=40, service_months=13
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=46, service_months=17
2025-05-09 17:35:57,431 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=45, service_months=19
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=40, service_months=13
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=51, service_months=14
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=35, service_months=24
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=44, service_months=19
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=53, service_months=20
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=59, service_months=20
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=27, service_months=13
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=52, service_months=17
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=42, service_months=20
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=32, service_months=22
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=27, service_months=15
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=37, service_months=18
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=47, service_months=23
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=42, service_months=20
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=35, service_months=15
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=47, service_months=13
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=27, service_months=18
2025-05-09 17:35:57,432 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=63, service_months=19
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=41, service_months=15
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=61, service_months=22
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=51, service_months=22
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=71, service_months=22
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=69, service_months=13
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=34, service_months=18
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=67, service_months=14
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=45, service_months=18
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=38, service_months=23
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=51, service_months=18
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=36, service_months=24
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=32, service_months=17
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=58, service_months=24
2025-05-09 17:35:57,433 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=34, service_months=17
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=37, service_months=19
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=50, service_months=24
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=53, service_months=16
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=25, service_months=22
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=60, service_months=22
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=21, service_months=15
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=28, service_months=14
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=32, service_months=16
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=43, service_months=21
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=34, service_months=19
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=40, service_months=14
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=49, service_months=13
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=27, service_months=19
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=44, service_months=14
2025-05-09 17:35:57,434 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=57, service_months=19
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=43, service_months=32
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=52, service_months=31
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=36, service_months=27
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=34, service_months=33
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=51, service_months=34
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=38, service_months=35
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=42, service_months=25
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=58, service_months=32
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=58, service_months=138
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=45, service_months=75
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=45, service_months=31
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=25, service_months=28
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=42, service_months=36
2025-05-09 17:35:57,435 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=49, service_months=25
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=38, service_months=41
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=52, service_months=33
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=41, service_months=29
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=46, service_months=32
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=40, service_months=34
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=43, service_months=29
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=55, service_months=41
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=43, service_months=41
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=38, service_months=65
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=53, service_months=31
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=59, service_months=31
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=33, service_months=25
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=47, service_months=47
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=42, service_months=29
2025-05-09 17:35:57,436 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=39, service_months=33
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=27, service_months=25
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=59, service_months=44
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=36, service_months=36
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=57, service_months=29
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=66, service_months=202
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=51, service_months=148
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=45, service_months=25
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=53, service_months=27
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=64, service_months=81
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=50, service_months=156
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=47, service_months=133
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=30, service_months=34
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=46, service_months=30
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=26, service_months=32
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=58, service_months=180
2025-05-09 17:35:57,437 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=38, service_months=145
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=64, service_months=44
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=40, service_months=42
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=62, service_months=34
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=34, service_months=32
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,438 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,440 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:35:57,445 [INFO    ] [cost_model.engines.term.run:54] [TERM.RUN YR=2026] Snapshot EOY active count (passed to term.run): 158
2025-05-09 17:35:57,445 [INFO    ] [cost_model.engines.term.run:55] [TERM.RUN YR=2026] Number of active employees for termination consideration (n): 158
2025-05-09 17:35:57,445 [INFO    ] [cost_model.engines.term.run:56] [TERM.RUN YR=2026] as_of date for filtering: 2025-01-01 00:00:00
2025-05-09 17:35:57,446 [INFO    ] [cost_model.engines.term.run:70] [TERM.RUN YR=2026] DataFrame 'df' shape after merge: (158, 12)
2025-05-09 17:35:57,446 [INFO    ] [cost_model.engines.term.run:71] [TERM.RUN YR=2026] Sample of term_rate in df (first 5):
   term_rate
0       0.15
1       0.15
2       0.15
3       0.15
4       0.15
2025-05-09 17:35:57,446 [INFO    ] [cost_model.engines.term.run:72] [TERM.RUN YR=2026] NaN term_rates after merge: 8
2025-05-09 17:35:57,446 [INFO    ] [cost_model.engines.term.run:88] [TERM.RUN YR=2026] Probabilistic mode. Probs array sample (first 5): [0.15 0.15 0.15 0.15 0.15]
2025-05-09 17:35:57,446 [INFO    ] [cost_model.engines.term.run:89] [TERM.RUN YR=2026] Number of losers: 29
2025-05-09 17:35:57,447 [DEBUG   ] [cost_model.engines.term.run:115] Generated 29 termination events for year 2026.
2025-05-09 17:35:57,447 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 179 new events...
2025-05-09 17:35:57,448 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:35:57,448 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 127 compensation updates to active employees.
2025-05-09 17:35:57,449 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 29 termination updates to existing employees.
2025-05-09 17:35:57,450 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,452 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:35:57,453 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:35:57,454 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:35:57,454 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,455 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2026 - Snapshot shape: (158, 11), Active: 110
2025-05-09 17:35:57,456 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2027 (Index 2) ---
2025-05-09 17:35:57,456 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2027 - Snapshot shape: (158, 11), Active: 110
2025-05-09 17:35:57,458 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2027:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
24  2027         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
25  2027         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
26  2027         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
27  2027       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
28  2027       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
29  2027       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
30  2027         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
31  2027       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
32  2027     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
33  2027         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
34  2027       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
35  2027     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:35:57,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=41, service_months=141
2025-05-09 17:35:57,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=52, service_months=202
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=67, service_months=180
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=35, service_months=105
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=66, service_months=233
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=30, service_months=69
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=47, service_months=210
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=70, service_months=194
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=35, service_months=129
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=34, service_months=80
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=66, service_months=210
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=59, service_months=333
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=52, service_months=62
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=59, service_months=107
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=41, service_months=102
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=67, service_months=193
2025-05-09 17:35:57,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=44, service_months=64
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=46, service_months=164
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=52, service_months=193
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=71, service_months=60
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=61, service_months=50
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=52, service_months=52
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=34, service_months=58
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=47, service_months=55
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=47, service_months=58
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=58, service_months=58
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=46, service_months=49
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=61, service_months=55
2025-05-09 17:35:57,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=33, service_months=59
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=50, service_months=57
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=43, service_months=50
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=62, service_months=37
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=45, service_months=43
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=41, service_months=42
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=68, service_months=41
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=55, service_months=38
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=49, service_months=48
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=67, service_months=48
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=51, service_months=45
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=32, service_months=48
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=56, service_months=37
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=36, service_months=37
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=61, service_months=42
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=58, service_months=37
2025-05-09 17:35:57,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=63, service_months=44
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=50, service_months=40
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=48, service_months=46
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=49, service_months=40
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=34, service_months=46
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=41, service_months=25
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=47, service_months=29
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=46, service_months=31
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=41, service_months=25
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=52, service_months=26
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=36, service_months=36
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=45, service_months=31
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=54, service_months=32
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=60, service_months=32
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=28, service_months=25
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=53, service_months=29
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=43, service_months=32
2025-05-09 17:35:57,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=33, service_months=34
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=28, service_months=27
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=38, service_months=30
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=48, service_months=35
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=43, service_months=32
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=36, service_months=27
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=48, service_months=25
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=28, service_months=30
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=64, service_months=31
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=42, service_months=27
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=62, service_months=34
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=52, service_months=34
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=72, service_months=34
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=70, service_months=25
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=35, service_months=30
2025-05-09 17:35:57,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=68, service_months=26
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=46, service_months=30
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=39, service_months=35
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=52, service_months=30
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=37, service_months=36
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=33, service_months=29
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=59, service_months=36
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=35, service_months=29
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=38, service_months=31
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=51, service_months=36
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=54, service_months=28
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=26, service_months=34
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=61, service_months=34
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=22, service_months=27
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=29, service_months=26
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=33, service_months=28
2025-05-09 17:35:57,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=44, service_months=33
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=35, service_months=31
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=41, service_months=26
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=50, service_months=25
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=28, service_months=31
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=45, service_months=26
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=58, service_months=31
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=44, service_months=44
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=53, service_months=43
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=37, service_months=39
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=35, service_months=45
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=52, service_months=46
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=39, service_months=47
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=43, service_months=37
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=59, service_months=44
2025-05-09 17:35:57,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=59, service_months=150
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=46, service_months=87
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=46, service_months=43
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=26, service_months=40
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=43, service_months=48
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=50, service_months=37
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=39, service_months=53
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=53, service_months=45
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=42, service_months=41
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=47, service_months=44
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=41, service_months=46
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=44, service_months=41
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=56, service_months=53
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=44, service_months=53
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=39, service_months=77
2025-05-09 17:35:57,466 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=54, service_months=43
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=60, service_months=43
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=34, service_months=37
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=48, service_months=59
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=43, service_months=41
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=40, service_months=45
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=28, service_months=37
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=60, service_months=56
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=37, service_months=48
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=58, service_months=41
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=67, service_months=214
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=52, service_months=160
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=46, service_months=37
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=54, service_months=39
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=65, service_months=93
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=51, service_months=168
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=48, service_months=145
2025-05-09 17:35:57,467 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=31, service_months=46
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=47, service_months=42
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=27, service_months=44
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=59, service_months=192
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=39, service_months=157
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=65, service_months=56
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=41, service_months=54
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=63, service_months=46
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=35, service_months=44
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,468 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,469 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,469 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,469 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,469 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,469 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,470 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:35:57,476 [DEBUG   ] [cost_model.engines.term.run:115] Generated 26 termination events for year 2027.
2025-05-09 17:35:57,476 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 176 new events...
2025-05-09 17:35:57,477 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:35:57,478 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 102 compensation updates to active employees.
2025-05-09 17:35:57,478 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 26 termination updates to existing employees.
2025-05-09 17:35:57,479 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,481 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:35:57,482 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:35:57,483 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:35:57,484 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,485 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2027 - Snapshot shape: (158, 11), Active: 94
2025-05-09 17:35:57,486 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2028 (Index 3) ---
2025-05-09 17:35:57,486 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2028 - Snapshot shape: (158, 11), Active: 94
2025-05-09 17:35:57,487 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2028:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
36  2028         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
37  2028         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
38  2028         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
39  2028       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
40  2028       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
41  2028       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
42  2028         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
43  2028       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
44  2028     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
45  2028         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
46  2028       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
47  2028     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=42, service_months=153
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=53, service_months=214
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=68, service_months=192
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=36, service_months=117
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=67, service_months=245
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=31, service_months=81
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=48, service_months=222
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=71, service_months=206
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=36, service_months=141
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=35, service_months=92
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=67, service_months=222
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=60, service_months=345
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=53, service_months=74
2025-05-09 17:35:57,488 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=60, service_months=119
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=42, service_months=114
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=68, service_months=205
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=45, service_months=76
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=47, service_months=176
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=53, service_months=205
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=72, service_months=72
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=62, service_months=62
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=53, service_months=64
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=35, service_months=70
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=48, service_months=67
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=48, service_months=70
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=59, service_months=70
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=47, service_months=61
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=62, service_months=67
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=34, service_months=71
2025-05-09 17:35:57,489 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=51, service_months=69
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=44, service_months=62
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=63, service_months=49
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=46, service_months=55
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=42, service_months=54
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=69, service_months=53
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=56, service_months=50
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=50, service_months=60
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=68, service_months=60
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=52, service_months=57
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=33, service_months=60
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=57, service_months=49
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=37, service_months=49
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=62, service_months=54
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=59, service_months=49
2025-05-09 17:35:57,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=64, service_months=56
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=51, service_months=52
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=49, service_months=58
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=50, service_months=52
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=35, service_months=58
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=42, service_months=37
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=48, service_months=41
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=47, service_months=43
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=42, service_months=37
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=53, service_months=38
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=37, service_months=48
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=46, service_months=43
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=55, service_months=44
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=61, service_months=44
2025-05-09 17:35:57,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=29, service_months=37
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=54, service_months=41
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=44, service_months=44
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=34, service_months=46
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=29, service_months=39
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=39, service_months=42
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=49, service_months=47
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=44, service_months=44
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=37, service_months=39
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=49, service_months=37
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=29, service_months=42
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=65, service_months=43
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=43, service_months=39
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=63, service_months=46
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=53, service_months=46
2025-05-09 17:35:57,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=73, service_months=46
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=71, service_months=37
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=36, service_months=42
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=69, service_months=38
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=47, service_months=42
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=40, service_months=47
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=53, service_months=42
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=38, service_months=48
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=34, service_months=41
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=60, service_months=48
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=36, service_months=41
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=39, service_months=43
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=52, service_months=48
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=55, service_months=40
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=27, service_months=46
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=62, service_months=46
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=23, service_months=39
2025-05-09 17:35:57,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=30, service_months=38
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=34, service_months=40
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=45, service_months=45
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=36, service_months=43
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=42, service_months=38
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=51, service_months=37
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=29, service_months=43
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=46, service_months=38
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=59, service_months=43
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=45, service_months=56
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=54, service_months=55
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=38, service_months=51
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=36, service_months=57
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=53, service_months=58
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=40, service_months=59
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=44, service_months=49
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=60, service_months=56
2025-05-09 17:35:57,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=60, service_months=162
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=47, service_months=99
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=47, service_months=55
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=27, service_months=52
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=44, service_months=60
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=51, service_months=49
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=40, service_months=65
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=54, service_months=57
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=43, service_months=53
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=48, service_months=56
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=42, service_months=58
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=45, service_months=53
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=57, service_months=65
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=45, service_months=65
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=40, service_months=89
2025-05-09 17:35:57,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=55, service_months=55
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=61, service_months=55
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=35, service_months=49
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=49, service_months=71
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=44, service_months=53
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=41, service_months=57
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=29, service_months=49
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=61, service_months=68
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=38, service_months=60
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=59, service_months=53
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=68, service_months=226
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=53, service_months=172
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=47, service_months=49
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=55, service_months=51
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=66, service_months=105
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=52, service_months=180
2025-05-09 17:35:57,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=49, service_months=157
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=32, service_months=58
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=48, service_months=54
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=28, service_months=56
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=60, service_months=204
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=40, service_months=169
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=66, service_months=68
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=42, service_months=66
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=64, service_months=58
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=36, service_months=56
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,499 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:35:57,505 [DEBUG   ] [cost_model.engines.term.run:115] Generated 23 termination events for year 2028.
2025-05-09 17:35:57,505 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 173 new events...
2025-05-09 17:35:57,506 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:35:57,507 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 86 compensation updates to active employees.
2025-05-09 17:35:57,508 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:35:57,508 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,511 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:35:57,511 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:35:57,512 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:35:57,513 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,514 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2028 - Snapshot shape: (158, 11), Active: 79
2025-05-09 17:35:57,515 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2029 (Index 4) ---
2025-05-09 17:35:57,515 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2029 - Snapshot shape: (158, 11), Active: 79
2025-05-09 17:35:57,516 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2029:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
48  2029         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
49  2029         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
50  2029         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
51  2029       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
52  2029       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
53  2029       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
54  2029         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
55  2029       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
56  2029     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
57  2029         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
58  2029       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
59  2029     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:35:57,517 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=43, service_months=165
2025-05-09 17:35:57,517 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=54, service_months=226
2025-05-09 17:35:57,517 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=69, service_months=204
2025-05-09 17:35:57,517 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=37, service_months=129
2025-05-09 17:35:57,517 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=68, service_months=257
2025-05-09 17:35:57,517 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=32, service_months=93
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=49, service_months=234
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=72, service_months=218
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=37, service_months=153
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=36, service_months=104
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=68, service_months=234
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=61, service_months=357
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=54, service_months=86
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=61, service_months=131
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=43, service_months=126
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=69, service_months=217
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=46, service_months=88
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=48, service_months=188
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=54, service_months=217
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=73, service_months=84
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=63, service_months=74
2025-05-09 17:35:57,518 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=54, service_months=76
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=36, service_months=82
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=49, service_months=79
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=49, service_months=82
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=60, service_months=82
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=48, service_months=73
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=63, service_months=79
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=35, service_months=83
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=52, service_months=81
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=45, service_months=74
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=64, service_months=61
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=47, service_months=67
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=43, service_months=66
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=70, service_months=65
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=57, service_months=62
2025-05-09 17:35:57,519 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=51, service_months=72
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=69, service_months=72
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=53, service_months=69
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=34, service_months=72
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=58, service_months=61
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=38, service_months=61
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=63, service_months=66
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=60, service_months=61
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=65, service_months=68
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=52, service_months=64
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=50, service_months=70
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=51, service_months=64
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=36, service_months=70
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=43, service_months=49
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=49, service_months=53
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=48, service_months=55
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=43, service_months=49
2025-05-09 17:35:57,520 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=54, service_months=50
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=38, service_months=60
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=47, service_months=55
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=56, service_months=56
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=62, service_months=56
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=30, service_months=49
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=55, service_months=53
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=45, service_months=56
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=35, service_months=58
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=30, service_months=51
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=40, service_months=54
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=50, service_months=59
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=45, service_months=56
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=38, service_months=51
2025-05-09 17:35:57,521 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=50, service_months=49
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=30, service_months=54
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=66, service_months=55
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=44, service_months=51
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=64, service_months=58
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=54, service_months=58
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=74, service_months=58
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=72, service_months=49
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=37, service_months=54
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=70, service_months=50
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=48, service_months=54
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=41, service_months=59
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=54, service_months=54
2025-05-09 17:35:57,522 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=39, service_months=60
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=35, service_months=53
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=61, service_months=60
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=37, service_months=53
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=40, service_months=55
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=53, service_months=60
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=56, service_months=52
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=28, service_months=58
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=63, service_months=58
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=24, service_months=51
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=31, service_months=50
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=35, service_months=52
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=46, service_months=57
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=37, service_months=55
2025-05-09 17:35:57,523 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=43, service_months=50
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=52, service_months=49
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=30, service_months=55
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=47, service_months=50
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=60, service_months=55
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=46, service_months=68
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=55, service_months=67
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=39, service_months=63
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=37, service_months=69
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=54, service_months=70
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=41, service_months=71
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=45, service_months=61
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=61, service_months=68
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=61, service_months=174
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=48, service_months=111
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=48, service_months=67
2025-05-09 17:35:57,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=28, service_months=64
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=45, service_months=72
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=52, service_months=61
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=41, service_months=77
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=55, service_months=69
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=44, service_months=65
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=49, service_months=68
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=43, service_months=70
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=46, service_months=65
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=58, service_months=77
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=46, service_months=77
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=41, service_months=101
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=56, service_months=67
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=62, service_months=67
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=36, service_months=61
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=50, service_months=83
2025-05-09 17:35:57,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=45, service_months=65
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=42, service_months=69
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=30, service_months=61
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=62, service_months=80
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=39, service_months=72
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=60, service_months=65
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=69, service_months=238
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=54, service_months=184
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=48, service_months=61
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=56, service_months=63
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=67, service_months=117
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=53, service_months=192
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=50, service_months=169
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=33, service_months=70
2025-05-09 17:35:57,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=49, service_months=66
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=29, service_months=68
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=61, service_months=216
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=41, service_months=181
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=67, service_months=80
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=43, service_months=78
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=65, service_months=70
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=37, service_months=68
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:35:57,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:35:57,529 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:35:57,535 [DEBUG   ] [cost_model.engines.term.run:115] Generated 32 termination events for year 2029.
2025-05-09 17:35:57,535 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 182 new events...
2025-05-09 17:35:57,536 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:35:57,536 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 71 compensation updates to active employees.
2025-05-09 17:35:57,537 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 32 termination updates to existing employees.
2025-05-09 17:35:57,538 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,540 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:35:57,541 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 8 potentially existing employees found in new events.
2025-05-09 17:35:57,542 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 8 compensation updates to active employees.
2025-05-09 17:35:57,542 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:35:57,543 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2029 - Snapshot shape: (158, 11), Active: 60
2025-05-09 17:35:57,545 [INFO    ] [__main__.run_5_year_projection_test:415] 
--- Projection Summary ---
2025-05-09 17:35:57,550 [INFO    ] [__main__.run_5_year_projection_test:421] Projection summary and final event log saved to: output_dev/projection_run_output
2025-05-09 17:35:57,557 [DEBUG   ] [matplotlib.pyplot.switch_backend:487] Loaded backend macosx version unknown.
2025-05-09 17:35:57,647 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:35:57,648 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,649 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,650 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,651 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,652 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,653 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,654 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,655 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,656 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,657 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,657 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,657 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,657 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,657 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,657 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,726 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,727 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,728 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,729 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:35:57,767 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-09 17:35:57,767 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,768 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,769 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,770 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,771 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,772 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,773 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,774 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,775 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,776 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:35:57,777 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,778 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:35:57,779 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:35:57,780 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:35:57,811 [INFO    ] [__main__.run_5_year_projection_test:447] Projection plot saved to: output_dev/projection_run_output/headcount_projection.png
2025-05-09 17:37:18,131 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:37:18,135 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:37:18,135 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:37:18,135 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:37:18,135 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:37:18,136 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:37:18,181 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:37:18,187 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:37:18,187 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:37:18,187 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:37:18,187 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:37:18,187 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:37:18,188 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:37:18,188 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:37:18,190 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:37:18,190 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:37:18,190 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:37:18,190 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-09 17:37:18,192 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:37:18,193 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:37:18,194 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:37:18,195 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:37:18,196 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:37:18,197 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:37:18,198 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:37:18,199 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:37:18,200 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:37:18,201 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:37:18,202 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:37:18,202 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:37:18,202 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:37:18,204 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:37:18,212 [DEBUG   ] [cost_model.engines.term.run:115] Generated 23 termination events for year 2025.
2025-05-09 17:37:18,212 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-09 17:37:18,214 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:37:18,215 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-09 17:37:18,216 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:37:18,216 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-09 17:37:18,219 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-09 17:37:18,220 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:37:18,227 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:37:18,227 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:38:30,903 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:38:30,907 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:38:30,907 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:38:30,907 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:38:30,907 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:38:30,907 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:38:30,931 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:38:30,934 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:38:30,934 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:38:30,934 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:38:30,935 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:38:30,935 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:38:30,935 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:38:30,936 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:38:30,937 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:38:30,937 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:38:30,937 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:38:30,937 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-09 17:38:30,939 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:38:30,940 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:38:30,941 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:38:30,942 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:38:30,943 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:38:30,944 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:38:30,945 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:38:30,946 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:38:30,947 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:38:30,948 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:38:30,949 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:38:30,952 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:38:30,958 [DEBUG   ] [cost_model.engines.term.run:115] Generated 23 termination events for year 2025.
2025-05-09 17:38:30,958 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-09 17:38:30,959 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:38:30,960 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-09 17:38:30,961 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:38:30,962 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-09 17:38:30,964 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-09 17:38:30,965 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:38:30,971 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:38:30,971 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:40:59,735 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:40:59,739 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:40:59,739 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:40:59,739 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:40:59,740 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:40:59,740 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:40:59,760 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:40:59,763 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:40:59,764 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:40:59,764 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:40:59,764 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:40:59,764 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:40:59,765 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:40:59,765 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:40:59,766 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:40:59,766 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:40:59,766 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:40:59,766 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-09 17:40:59,767 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:40:59,768 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:40:59,768 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:40:59,768 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:40:59,768 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:40:59,769 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:40:59,770 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:40:59,771 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:40:59,772 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:40:59,773 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:40:59,774 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:40:59,775 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:40:59,776 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:40:59,777 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:40:59,778 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:40:59,781 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:40:59,787 [DEBUG   ] [cost_model.engines.term.run:115] Generated 23 termination events for year 2025.
2025-05-09 17:40:59,788 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-09 17:40:59,788 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:40:59,789 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-09 17:40:59,790 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:40:59,791 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-09 17:40:59,793 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-09 17:40:59,794 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:40:59,799 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:40:59,800 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:41:21,385 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-09 17:41:21,389 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-09 17:41:21,389 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-09 17:41:21,389 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-09 17:41:21,389 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-09 17:41:21,389 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-09 17:41:21,410 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-09 17:41:21,413 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-09 17:41:21,413 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-09 17:41:21,413 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-09 17:41:21,414 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-09 17:41:21,414 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-09 17:41:21,414 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-09 17:41:21,414 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-09 17:41:21,415 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-09 17:41:21,415 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-09 17:41:21,415 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-09 17:41:21,416 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-09 17:41:21,417 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pct                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  cfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-09 17:41:21,418 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-09 17:41:21,419 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-09 17:41:21,420 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-09 17:41:21,421 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-09 17:41:21,422 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-09 17:41:21,423 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-09 17:41:21,424 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-09 17:41:21,425 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-09 17:41:21,426 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-09 17:41:21,427 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-09 17:41:21,428 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-09 17:41:21,430 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:41:21,437 [DEBUG   ] [cost_model.engines.term.run:115] Generated 23 termination events for year 2025.
2025-05-09 17:41:21,437 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-09 17:41:21,438 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:41:21,439 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-09 17:41:21,440 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-09 17:41:21,440 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-09 17:41:21,442 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-09 17:41:21,443 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:41:21,449 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:41:21,449 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:41:21,450 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2025] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2025.
2025-05-09 17:41:21,451 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2025] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2025-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2025
1      NaN 2025-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2025
2      NaN 2025-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2025
3      NaN 2025-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2025
4      NaN 2025-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2025
2025-05-09 17:41:21,451 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2025] 'year' column dtype: int64
2025-05-09 17:41:21,452 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2025] Unique years in returned events: [2025]
2025-05-09 17:41:21,452 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2025 - Snapshot shape: (158, 11), Active: 135
2025-05-09 17:41:21,453 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2026 (Index 1) ---
2025-05-09 17:41:21,453 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2026 - Snapshot shape: (158, 11), Active: 135
2025-05-09 17:41:21,454 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2026:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pct                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  cfg
12  2026         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
13  2026         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
14  2026         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
15  2026       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
16  2026       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
17  2026       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
18  2026         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
19  2026       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
20  2026     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
21  2026         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
22  2026       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
23  2026     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=40, service_months=129
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=51, service_months=190
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=66, service_months=168
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=34, service_months=93
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=65, service_months=221
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=29, service_months=57
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=46, service_months=198
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=69, service_months=182
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=34, service_months=117
2025-05-09 17:41:21,455 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=33, service_months=68
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=65, service_months=198
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=58, service_months=321
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=51, service_months=50
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=58, service_months=95
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=40, service_months=90
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=66, service_months=181
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=43, service_months=52
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=45, service_months=152
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=51, service_months=181
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=70, service_months=48
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=60, service_months=38
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=51, service_months=40
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=33, service_months=46
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=46, service_months=43
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=46, service_months=46
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=57, service_months=46
2025-05-09 17:41:21,456 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=45, service_months=37
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=60, service_months=43
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=32, service_months=47
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=49, service_months=45
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=42, service_months=38
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=61, service_months=25
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=44, service_months=31
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=40, service_months=30
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=67, service_months=29
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=54, service_months=26
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=48, service_months=36
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=66, service_months=36
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=50, service_months=33
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=31, service_months=36
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=55, service_months=25
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=35, service_months=25
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=60, service_months=30
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=57, service_months=25
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=62, service_months=32
2025-05-09 17:41:21,457 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=49, service_months=28
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=47, service_months=34
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=48, service_months=28
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=33, service_months=34
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=40, service_months=13
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=46, service_months=17
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=45, service_months=19
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=40, service_months=13
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=51, service_months=14
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=35, service_months=24
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=44, service_months=19
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=53, service_months=20
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=59, service_months=20
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=27, service_months=13
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=52, service_months=17
2025-05-09 17:41:21,458 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=42, service_months=20
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=32, service_months=22
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=27, service_months=15
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=37, service_months=18
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=47, service_months=23
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=42, service_months=20
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=35, service_months=15
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=47, service_months=13
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=27, service_months=18
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=63, service_months=19
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=41, service_months=15
2025-05-09 17:41:21,459 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=61, service_months=22
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=51, service_months=22
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=71, service_months=22
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=69, service_months=13
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=34, service_months=18
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=67, service_months=14
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=45, service_months=18
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=38, service_months=23
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=51, service_months=18
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=36, service_months=24
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=32, service_months=17
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=58, service_months=24
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=34, service_months=17
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=37, service_months=19
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=50, service_months=24
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=53, service_months=16
2025-05-09 17:41:21,460 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=25, service_months=22
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=60, service_months=22
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=21, service_months=15
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=28, service_months=14
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=32, service_months=16
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=43, service_months=21
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=34, service_months=19
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=40, service_months=14
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=49, service_months=13
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=27, service_months=19
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=44, service_months=14
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=57, service_months=19
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=43, service_months=32
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=52, service_months=31
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=36, service_months=27
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=34, service_months=33
2025-05-09 17:41:21,461 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=51, service_months=34
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=38, service_months=35
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=42, service_months=25
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=58, service_months=32
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=58, service_months=138
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=45, service_months=75
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=45, service_months=31
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=25, service_months=28
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=42, service_months=36
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=49, service_months=25
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=38, service_months=41
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=52, service_months=33
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=41, service_months=29
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=46, service_months=32
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=40, service_months=34
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=43, service_months=29
2025-05-09 17:41:21,462 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=55, service_months=41
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=43, service_months=41
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=38, service_months=65
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=53, service_months=31
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=59, service_months=31
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=33, service_months=25
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=47, service_months=47
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=42, service_months=29
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=39, service_months=33
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=27, service_months=25
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=59, service_months=44
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=36, service_months=36
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=57, service_months=29
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=66, service_months=202
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=51, service_months=148
2025-05-09 17:41:21,463 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=45, service_months=25
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=53, service_months=27
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=64, service_months=81
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=50, service_months=156
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=47, service_months=133
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=30, service_months=34
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=46, service_months=30
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=26, service_months=32
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=58, service_months=180
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=38, service_months=145
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=64, service_months=44
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=40, service_months=42
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=62, service_months=34
2025-05-09 17:41:21,464 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=34, service_months=32
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,465 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,467 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:41:21,472 [INFO    ] [cost_model.engines.term.run:54] [TERM.RUN YR=2026] Snapshot EOY active count (passed to term.run): 158
2025-05-09 17:41:21,472 [INFO    ] [cost_model.engines.term.run:55] [TERM.RUN YR=2026] Number of active employees for termination consideration (n): 158
2025-05-09 17:41:21,472 [INFO    ] [cost_model.engines.term.run:56] [TERM.RUN YR=2026] as_of date for filtering: 2025-01-01 00:00:00
2025-05-09 17:41:21,473 [INFO    ] [cost_model.engines.term.run:70] [TERM.RUN YR=2026] DataFrame 'df' shape after merge: (158, 12)
2025-05-09 17:41:21,473 [INFO    ] [cost_model.engines.term.run:71] [TERM.RUN YR=2026] Sample of term_rate in df (first 5):
   term_rate
0       0.15
1       0.15
2       0.15
3       0.15
4       0.15
2025-05-09 17:41:21,473 [INFO    ] [cost_model.engines.term.run:72] [TERM.RUN YR=2026] NaN term_rates after merge: 8
2025-05-09 17:41:21,473 [INFO    ] [cost_model.engines.term.run:88] [TERM.RUN YR=2026] Probabilistic mode. Probs array sample (first 5): [0.15 0.15 0.15 0.15 0.15]
2025-05-09 17:41:21,473 [INFO    ] [cost_model.engines.term.run:89] [TERM.RUN YR=2026] Number of losers: 29
2025-05-09 17:41:21,474 [DEBUG   ] [cost_model.engines.term.run:115] Generated 29 termination events for year 2026.
2025-05-09 17:41:21,474 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 179 new events...
2025-05-09 17:41:21,475 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:41:21,475 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 127 compensation updates to active employees.
2025-05-09 17:41:21,476 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 29 termination updates to existing employees.
2025-05-09 17:41:21,477 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-09 17:41:21,479 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-09 17:41:21,480 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-09 17:41:21,485 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-09 17:41:21,485 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (166, 11)
2025-05-09 17:41:21,486 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2026] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2026.
2025-05-09 17:41:21,486 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2026] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2026-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2026
1      NaN 2026-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2026
2      NaN 2026-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2026
3      NaN 2026-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2026
4      NaN 2026-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2026
2025-05-09 17:41:21,487 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2026] 'year' column dtype: int64
2025-05-09 17:41:21,487 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2026] Unique years in returned events: [2026]
2025-05-09 17:41:21,487 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2026 - Snapshot shape: (166, 11), Active: 118
2025-05-09 17:41:21,488 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2027 (Index 2) ---
2025-05-09 17:41:21,488 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2027 - Snapshot shape: (166, 11), Active: 118
2025-05-09 17:41:21,489 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2027:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
24  2027         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
25  2027         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
26  2027         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
27  2027       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
28  2027       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
29  2027       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
30  2027         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
31  2027       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
32  2027     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
33  2027         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
34  2027       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
35  2027     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=41, service_months=141
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=52, service_months=202
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=67, service_months=180
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=35, service_months=105
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=66, service_months=233
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=30, service_months=69
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=47, service_months=210
2025-05-09 17:41:21,490 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=70, service_months=194
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=35, service_months=129
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=34, service_months=80
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=66, service_months=210
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=59, service_months=333
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=52, service_months=62
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=59, service_months=107
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=41, service_months=102
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=67, service_months=193
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=44, service_months=64
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=46, service_months=164
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=52, service_months=193
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=71, service_months=60
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=61, service_months=50
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=52, service_months=52
2025-05-09 17:41:21,491 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=34, service_months=58
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=47, service_months=55
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=47, service_months=58
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=58, service_months=58
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=46, service_months=49
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=61, service_months=55
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=33, service_months=59
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=50, service_months=57
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=43, service_months=50
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=62, service_months=37
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=45, service_months=43
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=41, service_months=42
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=68, service_months=41
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=55, service_months=38
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=49, service_months=48
2025-05-09 17:41:21,492 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=67, service_months=48
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=51, service_months=45
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=32, service_months=48
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=56, service_months=37
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=36, service_months=37
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=61, service_months=42
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=58, service_months=37
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=63, service_months=44
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=50, service_months=40
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=48, service_months=46
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=49, service_months=40
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=34, service_months=46
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=41, service_months=25
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=47, service_months=29
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=46, service_months=31
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=41, service_months=25
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=52, service_months=26
2025-05-09 17:41:21,493 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=36, service_months=36
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=45, service_months=31
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=54, service_months=32
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=60, service_months=32
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=28, service_months=25
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=53, service_months=29
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=43, service_months=32
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=33, service_months=34
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=28, service_months=27
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=38, service_months=30
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=48, service_months=35
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=43, service_months=32
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=36, service_months=27
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=48, service_months=25
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=28, service_months=30
2025-05-09 17:41:21,494 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=64, service_months=31
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=42, service_months=27
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=62, service_months=34
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=52, service_months=34
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=72, service_months=34
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=70, service_months=25
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=35, service_months=30
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=68, service_months=26
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=46, service_months=30
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=39, service_months=35
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=52, service_months=30
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=37, service_months=36
2025-05-09 17:41:21,495 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=33, service_months=29
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=59, service_months=36
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=35, service_months=29
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=38, service_months=31
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=51, service_months=36
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=54, service_months=28
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=26, service_months=34
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=61, service_months=34
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=22, service_months=27
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=29, service_months=26
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=33, service_months=28
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=44, service_months=33
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=35, service_months=31
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=41, service_months=26
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=50, service_months=25
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=28, service_months=31
2025-05-09 17:41:21,496 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=45, service_months=26
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=58, service_months=31
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=44, service_months=44
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=53, service_months=43
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=37, service_months=39
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=35, service_months=45
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=52, service_months=46
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=39, service_months=47
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=43, service_months=37
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=59, service_months=44
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=59, service_months=150
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=46, service_months=87
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=46, service_months=43
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=26, service_months=40
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=43, service_months=48
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=50, service_months=37
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-09 17:41:21,497 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=39, service_months=53
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=53, service_months=45
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=42, service_months=41
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=47, service_months=44
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=41, service_months=46
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=44, service_months=41
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=56, service_months=53
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=44, service_months=53
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=39, service_months=77
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=54, service_months=43
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=60, service_months=43
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=34, service_months=37
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=48, service_months=59
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=43, service_months=41
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=40, service_months=45
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=28, service_months=37
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=60, service_months=56
2025-05-09 17:41:21,498 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=37, service_months=48
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=58, service_months=41
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=67, service_months=214
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=52, service_months=160
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=46, service_months=37
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=54, service_months=39
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=65, service_months=93
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=51, service_months=168
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=48, service_months=145
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=31, service_months=46
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=47, service_months=42
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=27, service_months=44
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=59, service_months=192
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=39, service_months=157
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=65, service_months=56
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=41, service_months=54
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=63, service_months=46
2025-05-09 17:41:21,499 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=35, service_months=44
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,500 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,501 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,502 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:41:21,508 [DEBUG   ] [cost_model.engines.term.run:115] Generated 26 termination events for year 2027.
2025-05-09 17:41:21,508 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((166, 11)) with 176 new events...
2025-05-09 17:41:21,509 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:41:21,510 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 102 compensation updates to active employees.
2025-05-09 17:41:21,511 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 26 termination updates to existing employees.
2025-05-09 17:41:21,511 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (166, 11)
2025-05-09 17:41:21,513 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((166, 11)) with 18 new events...
2025-05-09 17:41:21,514 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 9 new hires.
2025-05-09 17:41:21,519 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 9 new hire rows to snapshot.
2025-05-09 17:41:21,520 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (175, 11)
2025-05-09 17:41:21,520 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2027] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2027.
2025-05-09 17:41:21,521 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2027] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2027-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2027
1      NaN 2027-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2027
2      NaN 2027-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2027
3      NaN 2027-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2027
4      NaN 2027-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2027
2025-05-09 17:41:21,521 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2027] 'year' column dtype: int64
2025-05-09 17:41:21,521 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2027] Unique years in returned events: [2027]
2025-05-09 17:41:21,521 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2027 - Snapshot shape: (175, 11), Active: 111
2025-05-09 17:41:21,522 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2028 (Index 3) ---
2025-05-09 17:41:21,522 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2028 - Snapshot shape: (175, 11), Active: 111
2025-05-09 17:41:21,523 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2028:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
36  2028         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
37  2028         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
38  2028         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
39  2028       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
40  2028       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
41  2028       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
42  2028         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
43  2028       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
44  2028     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
45  2028         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
46  2028       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
47  2028     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=42, service_months=153
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=53, service_months=214
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=68, service_months=192
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=36, service_months=117
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=67, service_months=245
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=31, service_months=81
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=48, service_months=222
2025-05-09 17:41:21,524 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=71, service_months=206
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=36, service_months=141
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=35, service_months=92
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=67, service_months=222
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=60, service_months=345
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=53, service_months=74
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=60, service_months=119
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=42, service_months=114
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=68, service_months=205
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=45, service_months=76
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=47, service_months=176
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=53, service_months=205
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=72, service_months=72
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=62, service_months=62
2025-05-09 17:41:21,525 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=53, service_months=64
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=35, service_months=70
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=48, service_months=67
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=48, service_months=70
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=59, service_months=70
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=47, service_months=61
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=62, service_months=67
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=34, service_months=71
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=51, service_months=69
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=44, service_months=62
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=63, service_months=49
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=46, service_months=55
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=42, service_months=54
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=69, service_months=53
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=56, service_months=50
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=50, service_months=60
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=68, service_months=60
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=52, service_months=57
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=33, service_months=60
2025-05-09 17:41:21,526 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=57, service_months=49
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=37, service_months=49
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=62, service_months=54
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=59, service_months=49
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=64, service_months=56
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=51, service_months=52
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=49, service_months=58
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=50, service_months=52
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=35, service_months=58
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=42, service_months=37
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=48, service_months=41
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=47, service_months=43
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=42, service_months=37
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=53, service_months=38
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=37, service_months=48
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=46, service_months=43
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=55, service_months=44
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=61, service_months=44
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=29, service_months=37
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=54, service_months=41
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=44, service_months=44
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=34, service_months=46
2025-05-09 17:41:21,527 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=29, service_months=39
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=39, service_months=42
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=49, service_months=47
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=44, service_months=44
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=37, service_months=39
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=49, service_months=37
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=29, service_months=42
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=65, service_months=43
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=43, service_months=39
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=63, service_months=46
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=53, service_months=46
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=73, service_months=46
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=71, service_months=37
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=36, service_months=42
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=69, service_months=38
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=47, service_months=42
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=40, service_months=47
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=53, service_months=42
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=38, service_months=48
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=34, service_months=41
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=60, service_months=48
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=36, service_months=41
2025-05-09 17:41:21,528 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=39, service_months=43
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=52, service_months=48
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=55, service_months=40
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=27, service_months=46
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=62, service_months=46
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=23, service_months=39
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=30, service_months=38
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=34, service_months=40
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=45, service_months=45
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=36, service_months=43
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=42, service_months=38
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=51, service_months=37
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=29, service_months=43
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=46, service_months=38
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=59, service_months=43
2025-05-09 17:41:21,529 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=45, service_months=56
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=54, service_months=55
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=38, service_months=51
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=36, service_months=57
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=53, service_months=58
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=40, service_months=59
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=44, service_months=49
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=60, service_months=56
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=60, service_months=162
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=47, service_months=99
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=47, service_months=55
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=27, service_months=52
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=44, service_months=60
2025-05-09 17:41:21,530 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=51, service_months=49
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=40, service_months=65
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=54, service_months=57
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=43, service_months=53
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=48, service_months=56
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=42, service_months=58
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=45, service_months=53
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=57, service_months=65
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=45, service_months=65
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=40, service_months=89
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=55, service_months=55
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=61, service_months=55
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=35, service_months=49
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=49, service_months=71
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=44, service_months=53
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=41, service_months=57
2025-05-09 17:41:21,531 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=29, service_months=49
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=61, service_months=68
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=38, service_months=60
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=59, service_months=53
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=68, service_months=226
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=53, service_months=172
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=47, service_months=49
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=55, service_months=51
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=66, service_months=105
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=52, service_months=180
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=49, service_months=157
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=32, service_months=58
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=48, service_months=54
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=28, service_months=56
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=60, service_months=204
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=40, service_months=169
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=66, service_months=68
2025-05-09 17:41:21,532 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=42, service_months=66
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=64, service_months=58
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=36, service_months=56
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,533 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,534 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,536 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:41:21,542 [DEBUG   ] [cost_model.engines.term.run:115] Generated 21 termination events for year 2028.
2025-05-09 17:41:21,542 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((175, 11)) with 171 new events...
2025-05-09 17:41:21,543 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:41:21,544 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 86 compensation updates to active employees.
2025-05-09 17:41:21,544 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 21 termination updates to existing employees.
2025-05-09 17:41:21,545 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (175, 11)
2025-05-09 17:41:21,547 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((175, 11)) with 18 new events...
2025-05-09 17:41:21,547 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 9 new hires.
2025-05-09 17:41:21,553 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 9 new hire rows to snapshot.
2025-05-09 17:41:21,553 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (184, 11)
2025-05-09 17:41:21,554 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2028] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2028.
2025-05-09 17:41:21,554 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2028] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2028-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2028
1      NaN 2028-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2028
2      NaN 2028-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2028
3      NaN 2028-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2028
4      NaN 2028-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2028
2025-05-09 17:41:21,555 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2028] 'year' column dtype: int64
2025-05-09 17:41:21,555 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2028] Unique years in returned events: [2028]
2025-05-09 17:41:21,555 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2028 - Snapshot shape: (184, 11), Active: 111
2025-05-09 17:41:21,556 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2029 (Index 4) ---
2025-05-09 17:41:21,556 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2029 - Snapshot shape: (184, 11), Active: 111
2025-05-09 17:41:21,557 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2029:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
48  2029         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
49  2029         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
50  2029         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
51  2029       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
52  2029       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
53  2029       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
54  2029         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
55  2029       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
56  2029     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
57  2029         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
58  2029       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
59  2029     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=43, service_months=165
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=54, service_months=226
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=69, service_months=204
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=37, service_months=129
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=68, service_months=257
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=32, service_months=93
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=49, service_months=234
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=72, service_months=218
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=37, service_months=153
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=36, service_months=104
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=68, service_months=234
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=61, service_months=357
2025-05-09 17:41:21,558 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=54, service_months=86
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=61, service_months=131
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=43, service_months=126
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=69, service_months=217
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=46, service_months=88
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=48, service_months=188
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=54, service_months=217
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=73, service_months=84
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=63, service_months=74
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=54, service_months=76
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=36, service_months=82
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=49, service_months=79
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=49, service_months=82
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=60, service_months=82
2025-05-09 17:41:21,559 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=48, service_months=73
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=63, service_months=79
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=35, service_months=83
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=52, service_months=81
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=45, service_months=74
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=64, service_months=61
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=47, service_months=67
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=43, service_months=66
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=70, service_months=65
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=57, service_months=62
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=51, service_months=72
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=69, service_months=72
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=53, service_months=69
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=34, service_months=72
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=58, service_months=61
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=38, service_months=61
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=63, service_months=66
2025-05-09 17:41:21,560 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=60, service_months=61
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=65, service_months=68
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=52, service_months=64
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=50, service_months=70
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=51, service_months=64
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=36, service_months=70
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=43, service_months=49
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=49, service_months=53
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=48, service_months=55
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=43, service_months=49
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=54, service_months=50
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=38, service_months=60
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=47, service_months=55
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=56, service_months=56
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=62, service_months=56
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=30, service_months=49
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=55, service_months=53
2025-05-09 17:41:21,561 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=45, service_months=56
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=35, service_months=58
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=30, service_months=51
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=40, service_months=54
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=50, service_months=59
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=45, service_months=56
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=38, service_months=51
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=50, service_months=49
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=30, service_months=54
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=66, service_months=55
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=44, service_months=51
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=64, service_months=58
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=54, service_months=58
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=74, service_months=58
2025-05-09 17:41:21,562 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=72, service_months=49
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=37, service_months=54
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=70, service_months=50
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=48, service_months=54
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=41, service_months=59
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=54, service_months=54
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=39, service_months=60
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=35, service_months=53
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=61, service_months=60
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=37, service_months=53
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=40, service_months=55
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=53, service_months=60
2025-05-09 17:41:21,563 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=56, service_months=52
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=28, service_months=58
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=63, service_months=58
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=24, service_months=51
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=31, service_months=50
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=35, service_months=52
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=46, service_months=57
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=37, service_months=55
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=43, service_months=50
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=52, service_months=49
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=30, service_months=55
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=47, service_months=50
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=60, service_months=55
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=46, service_months=68
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=55, service_months=67
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=39, service_months=63
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=37, service_months=69
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=54, service_months=70
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=41, service_months=71
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=45, service_months=61
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=61, service_months=68
2025-05-09 17:41:21,564 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=61, service_months=174
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=48, service_months=111
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=48, service_months=67
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=28, service_months=64
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=45, service_months=72
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=52, service_months=61
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=41, service_months=77
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=55, service_months=69
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=44, service_months=65
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=49, service_months=68
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=43, service_months=70
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=46, service_months=65
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=58, service_months=77
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=46, service_months=77
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=41, service_months=101
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=56, service_months=67
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=62, service_months=67
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=36, service_months=61
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=50, service_months=83
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=45, service_months=65
2025-05-09 17:41:21,565 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=42, service_months=69
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=30, service_months=61
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=62, service_months=80
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=39, service_months=72
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=60, service_months=65
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=69, service_months=238
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=54, service_months=184
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=48, service_months=61
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=56, service_months=63
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=67, service_months=117
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=53, service_months=192
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=50, service_months=169
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=33, service_months=70
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=49, service_months=66
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=29, service_months=68
2025-05-09 17:41:21,566 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=61, service_months=216
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=41, service_months=181
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=67, service_months=80
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=43, service_months=78
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=65, service_months=70
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=37, service_months=68
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,567 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,568 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-09 17:41:21,569 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-09 17:41:21,571 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-09 17:41:21,577 [DEBUG   ] [cost_model.engines.term.run:115] Generated 25 termination events for year 2029.
2025-05-09 17:41:21,577 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((184, 11)) with 175 new events...
2025-05-09 17:41:21,578 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-09 17:41:21,579 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 77 compensation updates to active employees.
2025-05-09 17:41:21,580 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 25 termination updates to existing employees.
2025-05-09 17:41:21,581 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (184, 11)
2025-05-09 17:41:21,583 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((184, 11)) with 20 new events...
2025-05-09 17:41:21,583 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 10 new hires.
2025-05-09 17:41:21,589 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 10 new hire rows to snapshot.
2025-05-09 17:41:21,590 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (194, 11)
2025-05-09 17:41:21,590 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2029] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2029.
2025-05-09 17:41:21,591 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2029] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2029-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2029
1      NaN 2029-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2029
2      NaN 2029-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2029
3      NaN 2029-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2029
4      NaN 2029-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2029
2025-05-09 17:41:21,591 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2029] 'year' column dtype: int64
2025-05-09 17:41:21,591 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2029] Unique years in returned events: [2029]
2025-05-09 17:41:21,591 [INFO    ] [__main__.run_5_year_projection_test:374] EOY 2029 - Snapshot shape: (194, 11), Active: 109
2025-05-09 17:41:21,592 [INFO    ] [__main__.run_5_year_projection_test:415] 
--- Projection Summary ---
2025-05-09 17:41:21,601 [INFO    ] [__main__.run_5_year_projection_test:421] Projection summary and final event log saved to: output_dev/projection_run_output
2025-05-09 17:41:21,607 [DEBUG   ] [matplotlib.pyplot.switch_backend:487] Loaded backend macosx version unknown.
2025-05-09 17:41:21,691 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,692 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,693 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,694 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,695 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,696 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,697 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,698 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,699 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,700 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,701 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,702 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,703 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,704 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-09 17:41:21,742 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,743 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,744 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,745 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,746 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,747 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,748 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,749 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,750 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,751 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,812 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,812 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,812 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,812 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,813 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,814 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-09 17:41:21,815 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-09 17:41:21,850 [INFO    ] [__main__.run_5_year_projection_test:447] Projection plot saved to: output_dev/projection_run_output/headcount_projection.png
2025-05-10 07:01:27,522 [INFO    ] [__main__.run_5_year_projection_test:215] Loading configuration from: /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/config/dev_tiny.yaml
2025-05-10 07:01:27,527 [INFO    ] [__main__.run_5_year_projection_test:245] Running 5-year projection starting from 2025.
2025-05-10 07:01:27,527 [INFO    ] [__main__.run_5_year_projection_test:246] Random seed: 42
2025-05-10 07:01:27,527 [INFO    ] [__main__.run_5_year_projection_test:247] Output will be saved to: output_dev/projection_run_output
2025-05-10 07:01:27,527 [INFO    ] [__main__.run_5_year_projection_test:284] Pydantic models not available, using SimpleNamespace for PlanRules.
2025-05-10 07:01:27,527 [INFO    ] [__main__.create_initial_snapshot:92] Creating initial snapshot for start year: 2025 from /Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/data/census_preprocessed.parquet
2025-05-10 07:01:27,622 [INFO    ] [__main__.create_initial_snapshot:100] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-10 07:01:27,629 [INFO    ] [__main__.create_initial_snapshot:167] Initial snapshot created with 150 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band']
2025-05-10 07:01:27,629 [DEBUG   ] [__main__.create_initial_snapshot:168] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
dtype: object
2025-05-10 07:01:27,630 [INFO    ] [__main__.create_initial_event_log:172] Creating initial event log for events up to start of year: 2025
2025-05-10 07:01:27,630 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: value_json with presumed dtype: string
2025-05-10 07:01:27,630 [DEBUG   ] [__main__.create_initial_event_log:185] Adding missing event log column: meta with presumed dtype: string
2025-05-10 07:01:27,631 [INFO    ] [__main__.create_initial_event_log:201] Initial event log created with 2 events.
2025-05-10 07:01:27,631 [DEBUG   ] [__main__.create_initial_event_log:202] Initial event log dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-10 07:01:27,632 [INFO    ] [__main__.run_5_year_projection_test:322] Using global rates for hazard table: Term Rate=0.15, Growth Rate=0.05, Comp Raise Pct=0.05
2025-05-10 07:01:27,633 [INFO    ] [__main__.run_5_year_projection_test:339] Hazard table constructed for 12 role/tenure combinations across 5 years.
2025-05-10 07:01:27,633 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2025 (Index 0) ---
2025-05-10 07:01:27,633 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2025 - Snapshot shape: (150, 9), Active: 150
2025-05-10 07:01:27,635 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2025:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
0   2025         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
1   2025         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2   2025         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
3   2025       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
4   2025       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
5   2025       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
6   2025         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
7   2025       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
8   2025     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
9   2025         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
10  2025       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
11  2025     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-10 07:01:27,636 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-10 07:01:27,637 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-10 07:01:27,638 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-10 07:01:27,639 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-10 07:01:27,640 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-10 07:01:27,641 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=42, service_months=20
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=51, service_months=19
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=35, service_months=15
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=33, service_months=21
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=50, service_months=22
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=37, service_months=23
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=41, service_months=13
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=57, service_months=20
2025-05-10 07:01:27,642 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=57, service_months=126
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=44, service_months=63
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=44, service_months=19
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=24, service_months=16
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=41, service_months=24
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=48, service_months=13
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=37, service_months=29
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=51, service_months=21
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=40, service_months=17
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=45, service_months=20
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=39, service_months=22
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=42, service_months=17
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=54, service_months=29
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=42, service_months=29
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=37, service_months=53
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=52, service_months=19
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=58, service_months=19
2025-05-10 07:01:27,643 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=32, service_months=13
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=46, service_months=35
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=41, service_months=17
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=38, service_months=21
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=26, service_months=13
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=58, service_months=32
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=35, service_months=24
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=56, service_months=17
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=65, service_months=190
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=50, service_months=136
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=44, service_months=13
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=52, service_months=15
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=63, service_months=69
2025-05-10 07:01:27,644 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=49, service_months=144
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=46, service_months=121
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=29, service_months=22
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=45, service_months=18
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=25, service_months=20
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=57, service_months=168
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=37, service_months=133
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=63, service_months=32
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=39, service_months=30
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=61, service_months=22
2025-05-10 07:01:27,645 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=33, service_months=20
2025-05-10 07:01:27,648 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-10 07:01:27,657 [DEBUG   ] [cost_model.engines.term.run:115] Generated 23 termination events for year 2025.
2025-05-10 07:01:27,657 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 9)) with 173 new events...
2025-05-10 07:01:27,658 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-10 07:01:27,659 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 150 compensation updates to active employees.
2025-05-10 07:01:27,660 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 23 termination updates to existing employees.
2025-05-10 07:01:27,661 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (150, 11)
2025-05-10 07:01:27,663 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((150, 11)) with 16 new events...
2025-05-10 07:01:27,664 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-10 07:01:27,671 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-10 07:01:27,672 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-10 07:01:27,672 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2025] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2025.
2025-05-10 07:01:27,673 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2025] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2025-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2025
1      NaN 2025-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2025
2      NaN 2025-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2025
3      NaN 2025-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2025
4      NaN 2025-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2025
2025-05-10 07:01:27,673 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2025] 'year' column dtype: int64
2025-05-10 07:01:27,673 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2025] Unique years in returned events: [2025]
2025-05-10 07:01:27,673 [INFO    ] [__main__.run_5_year_projection_test:379] EOY 2025 - Snapshot shape: (158, 11), Active: 135
2025-05-10 07:01:27,674 [DEBUG   ] [__main__.run_5_year_projection_test:401] Year 2025: Found 0 terminations in events_generated_this_year.
2025-05-10 07:01:27,674 [DEBUG   ] [__main__.run_5_year_projection_test:419] Year 2025: Found 0 hires in events_generated_this_year.
2025-05-10 07:01:27,675 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2026 (Index 1) ---
2025-05-10 07:01:27,675 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2026 - Snapshot shape: (158, 11), Active: 135
2025-05-10 07:01:27,676 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2026:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pct                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  cfg
12  2026         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
13  2026         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
14  2026         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
15  2026       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
16  2026       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
17  2026       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
18  2026         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
19  2026       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
20  2026     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
21  2026         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
22  2026       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
23  2026     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-10 07:01:27,677 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=40, service_months=129
2025-05-10 07:01:27,677 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=51, service_months=190
2025-05-10 07:01:27,677 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=66, service_months=168
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=34, service_months=93
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=65, service_months=221
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=29, service_months=57
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=46, service_months=198
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=69, service_months=182
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=34, service_months=117
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=33, service_months=68
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=65, service_months=198
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=58, service_months=321
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=51, service_months=50
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=58, service_months=95
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=40, service_months=90
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=66, service_months=181
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=43, service_months=52
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=45, service_months=152
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=51, service_months=181
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=70, service_months=48
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=60, service_months=38
2025-05-10 07:01:27,678 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=51, service_months=40
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=33, service_months=46
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=46, service_months=43
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=46, service_months=46
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=57, service_months=46
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=45, service_months=37
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=60, service_months=43
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=32, service_months=47
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=49, service_months=45
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=42, service_months=38
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=61, service_months=25
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=44, service_months=31
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=40, service_months=30
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=67, service_months=29
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=54, service_months=26
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=48, service_months=36
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=66, service_months=36
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=50, service_months=33
2025-05-10 07:01:27,679 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=31, service_months=36
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=55, service_months=25
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=35, service_months=25
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=60, service_months=30
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=57, service_months=25
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=62, service_months=32
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=49, service_months=28
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=47, service_months=34
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=48, service_months=28
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=33, service_months=34
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=40, service_months=13
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=46, service_months=17
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=45, service_months=19
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=40, service_months=13
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=51, service_months=14
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=35, service_months=24
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=44, service_months=19
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=53, service_months=20
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=59, service_months=20
2025-05-10 07:01:27,680 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=27, service_months=13
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=52, service_months=17
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=42, service_months=20
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=32, service_months=22
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=27, service_months=15
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=37, service_months=18
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=47, service_months=23
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=42, service_months=20
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=35, service_months=15
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=47, service_months=13
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=27, service_months=18
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=63, service_months=19
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=41, service_months=15
2025-05-10 07:01:27,681 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=61, service_months=22
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=51, service_months=22
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=71, service_months=22
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=69, service_months=13
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=34, service_months=18
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=67, service_months=14
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=45, service_months=18
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=38, service_months=23
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=51, service_months=18
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=36, service_months=24
2025-05-10 07:01:27,682 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=32, service_months=17
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=58, service_months=24
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=34, service_months=17
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=37, service_months=19
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=50, service_months=24
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=53, service_months=16
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=25, service_months=22
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=60, service_months=22
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=21, service_months=15
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=28, service_months=14
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=32, service_months=16
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=43, service_months=21
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=34, service_months=19
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=40, service_months=14
2025-05-10 07:01:27,683 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=49, service_months=13
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=27, service_months=19
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=44, service_months=14
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=57, service_months=19
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=43, service_months=32
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=52, service_months=31
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=36, service_months=27
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=34, service_months=33
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=51, service_months=34
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=38, service_months=35
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=42, service_months=25
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=58, service_months=32
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=58, service_months=138
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=45, service_months=75
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=45, service_months=31
2025-05-10 07:01:27,684 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=25, service_months=28
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=42, service_months=36
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=49, service_months=25
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=59, service_months=44
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=38, service_months=41
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=52, service_months=33
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=41, service_months=29
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=46, service_months=32
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=40, service_months=34
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=43, service_months=29
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=55, service_months=41
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=43, service_months=41
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=38, service_months=65
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=53, service_months=31
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=59, service_months=31
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=33, service_months=25
2025-05-10 07:01:27,685 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=47, service_months=47
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=42, service_months=29
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=39, service_months=33
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=27, service_months=25
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=59, service_months=44
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=36, service_months=36
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=57, service_months=29
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=66, service_months=202
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=51, service_months=148
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=45, service_months=25
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=53, service_months=27
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=64, service_months=81
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=50, service_months=156
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=47, service_months=133
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=30, service_months=34
2025-05-10 07:01:27,686 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=46, service_months=30
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=26, service_months=32
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=58, service_months=180
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=38, service_months=145
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=64, service_months=44
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=40, service_months=42
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=62, service_months=34
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=34, service_months=32
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,687 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,688 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,688 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,688 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,688 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,689 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-10 07:01:27,694 [INFO    ] [cost_model.engines.term.run:54] [TERM.RUN YR=2026] Snapshot EOY active count (passed to term.run): 158
2025-05-10 07:01:27,694 [INFO    ] [cost_model.engines.term.run:55] [TERM.RUN YR=2026] Number of active employees for termination consideration (n): 158
2025-05-10 07:01:27,694 [INFO    ] [cost_model.engines.term.run:56] [TERM.RUN YR=2026] as_of date for filtering: 2025-01-01 00:00:00
2025-05-10 07:01:27,695 [INFO    ] [cost_model.engines.term.run:70] [TERM.RUN YR=2026] DataFrame 'df' shape after merge: (158, 12)
2025-05-10 07:01:27,695 [INFO    ] [cost_model.engines.term.run:71] [TERM.RUN YR=2026] Sample of term_rate in df (first 5):
   term_rate
0       0.15
1       0.15
2       0.15
3       0.15
4       0.15
2025-05-10 07:01:27,695 [INFO    ] [cost_model.engines.term.run:72] [TERM.RUN YR=2026] NaN term_rates after merge: 8
2025-05-10 07:01:27,696 [INFO    ] [cost_model.engines.term.run:88] [TERM.RUN YR=2026] Probabilistic mode. Probs array sample (first 5): [0.15 0.15 0.15 0.15 0.15]
2025-05-10 07:01:27,696 [INFO    ] [cost_model.engines.term.run:89] [TERM.RUN YR=2026] Number of losers: 29
2025-05-10 07:01:27,696 [DEBUG   ] [cost_model.engines.term.run:115] Generated 29 termination events for year 2026.
2025-05-10 07:01:27,696 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 179 new events...
2025-05-10 07:01:27,697 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-10 07:01:27,698 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 127 compensation updates to active employees.
2025-05-10 07:01:27,699 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 29 termination updates to existing employees.
2025-05-10 07:01:27,699 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (158, 11)
2025-05-10 07:01:27,701 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((158, 11)) with 16 new events...
2025-05-10 07:01:27,702 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 8 new hires.
2025-05-10 07:01:27,707 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 8 new hire rows to snapshot.
2025-05-10 07:01:27,708 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (166, 11)
2025-05-10 07:01:27,708 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2026] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2026.
2025-05-10 07:01:27,709 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2026] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2026-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2026
1      NaN 2026-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2026
2      NaN 2026-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2026
3      NaN 2026-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2026
4      NaN 2026-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2026
2025-05-10 07:01:27,709 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2026] 'year' column dtype: int64
2025-05-10 07:01:27,709 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2026] Unique years in returned events: [2026]
2025-05-10 07:01:27,710 [INFO    ] [__main__.run_5_year_projection_test:379] EOY 2026 - Snapshot shape: (166, 11), Active: 118
2025-05-10 07:01:27,710 [DEBUG   ] [__main__.run_5_year_projection_test:401] Year 2026: Found 0 terminations in events_generated_this_year.
2025-05-10 07:01:27,710 [DEBUG   ] [__main__.run_5_year_projection_test:419] Year 2026: Found 0 hires in events_generated_this_year.
2025-05-10 07:01:27,711 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2027 (Index 2) ---
2025-05-10 07:01:27,711 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2027 - Snapshot shape: (166, 11), Active: 118
2025-05-10 07:01:27,712 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2027:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
24  2027         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
25  2027         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
26  2027         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
27  2027       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
28  2027       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
29  2027       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
30  2027         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
31  2027       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
32  2027     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
33  2027         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
34  2027       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
35  2027     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=41, service_months=141
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=52, service_months=202
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=67, service_months=180
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=35, service_months=105
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=66, service_months=233
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=30, service_months=69
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=47, service_months=210
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=70, service_months=194
2025-05-10 07:01:27,713 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=35, service_months=129
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=34, service_months=80
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=66, service_months=210
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=59, service_months=333
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=52, service_months=62
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=59, service_months=107
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=41, service_months=102
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=67, service_months=193
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=44, service_months=64
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=46, service_months=164
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=52, service_months=193
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=71, service_months=60
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=61, service_months=50
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=52, service_months=52
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=34, service_months=58
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=47, service_months=55
2025-05-10 07:01:27,714 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=47, service_months=58
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=58, service_months=58
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=46, service_months=49
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=61, service_months=55
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=33, service_months=59
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=50, service_months=57
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=43, service_months=50
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=62, service_months=37
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=45, service_months=43
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=41, service_months=42
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=68, service_months=41
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=55, service_months=38
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=49, service_months=48
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=67, service_months=48
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=51, service_months=45
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=32, service_months=48
2025-05-10 07:01:27,715 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=56, service_months=37
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=36, service_months=37
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=61, service_months=42
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=58, service_months=37
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=63, service_months=44
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=50, service_months=40
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=48, service_months=46
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=49, service_months=40
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=34, service_months=46
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=41, service_months=25
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=47, service_months=29
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=46, service_months=31
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=41, service_months=25
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=52, service_months=26
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=36, service_months=36
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=45, service_months=31
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=54, service_months=32
2025-05-10 07:01:27,716 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=60, service_months=32
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=28, service_months=25
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=53, service_months=29
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=43, service_months=32
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=33, service_months=34
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=28, service_months=27
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=38, service_months=30
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=48, service_months=35
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=43, service_months=32
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=36, service_months=27
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=48, service_months=25
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=28, service_months=30
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=64, service_months=31
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=42, service_months=27
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=62, service_months=34
2025-05-10 07:01:27,717 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=52, service_months=34
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=72, service_months=34
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=70, service_months=25
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=35, service_months=30
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=68, service_months=26
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=46, service_months=30
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=39, service_months=35
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=52, service_months=30
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=37, service_months=36
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=33, service_months=29
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=59, service_months=36
2025-05-10 07:01:27,718 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=35, service_months=29
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=38, service_months=31
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=51, service_months=36
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=54, service_months=28
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=26, service_months=34
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=61, service_months=34
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=22, service_months=27
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=29, service_months=26
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=33, service_months=28
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=44, service_months=33
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=35, service_months=31
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=41, service_months=26
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=50, service_months=25
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=28, service_months=31
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=45, service_months=26
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=58, service_months=31
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=44, service_months=44
2025-05-10 07:01:27,719 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=53, service_months=43
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=37, service_months=39
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=35, service_months=45
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=52, service_months=46
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=39, service_months=47
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=43, service_months=37
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=59, service_months=44
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=59, service_months=150
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=46, service_months=87
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=46, service_months=43
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=26, service_months=40
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=43, service_months=48
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=50, service_months=37
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=60, service_months=56
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=39, service_months=53
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=53, service_months=45
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=42, service_months=41
2025-05-10 07:01:27,720 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=47, service_months=44
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=41, service_months=46
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=44, service_months=41
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=56, service_months=53
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=44, service_months=53
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=39, service_months=77
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=54, service_months=43
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=60, service_months=43
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=34, service_months=37
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=48, service_months=59
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=43, service_months=41
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=40, service_months=45
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=28, service_months=37
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=60, service_months=56
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=37, service_months=48
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=58, service_months=41
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=67, service_months=214
2025-05-10 07:01:27,721 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=52, service_months=160
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=46, service_months=37
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=54, service_months=39
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=65, service_months=93
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=51, service_months=168
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=48, service_months=145
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=31, service_months=46
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=47, service_months=42
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=27, service_months=44
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=59, service_months=192
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=39, service_months=157
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=65, service_months=56
2025-05-10 07:01:27,722 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=41, service_months=54
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=63, service_months=46
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=35, service_months=44
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,723 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,724 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,725 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-10 07:01:27,732 [DEBUG   ] [cost_model.engines.term.run:115] Generated 26 termination events for year 2027.
2025-05-10 07:01:27,732 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((166, 11)) with 176 new events...
2025-05-10 07:01:27,733 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-10 07:01:27,734 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 102 compensation updates to active employees.
2025-05-10 07:01:27,735 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 26 termination updates to existing employees.
2025-05-10 07:01:27,735 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (166, 11)
2025-05-10 07:01:27,737 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((166, 11)) with 18 new events...
2025-05-10 07:01:27,738 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 9 new hires.
2025-05-10 07:01:27,743 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 9 new hire rows to snapshot.
2025-05-10 07:01:27,744 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (175, 11)
2025-05-10 07:01:27,744 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2027] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2027.
2025-05-10 07:01:27,745 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2027] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2027-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2027
1      NaN 2027-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2027
2      NaN 2027-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2027
3      NaN 2027-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2027
4      NaN 2027-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2027
2025-05-10 07:01:27,745 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2027] 'year' column dtype: int64
2025-05-10 07:01:27,745 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2027] Unique years in returned events: [2027]
2025-05-10 07:01:27,745 [INFO    ] [__main__.run_5_year_projection_test:379] EOY 2027 - Snapshot shape: (175, 11), Active: 111
2025-05-10 07:01:27,746 [DEBUG   ] [__main__.run_5_year_projection_test:401] Year 2027: Found 0 terminations in events_generated_this_year.
2025-05-10 07:01:27,746 [DEBUG   ] [__main__.run_5_year_projection_test:419] Year 2027: Found 0 hires in events_generated_this_year.
2025-05-10 07:01:27,747 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2028 (Index 3) ---
2025-05-10 07:01:27,747 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2028 - Snapshot shape: (175, 11), Active: 111
2025-05-10 07:01:27,748 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2028:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
36  2028         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
37  2028         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
38  2028         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
39  2028       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
40  2028       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
41  2028       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
42  2028         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
43  2028       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
44  2028     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
45  2028         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
46  2028       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
47  2028     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-10 07:01:27,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=42, service_months=153
2025-05-10 07:01:27,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=53, service_months=214
2025-05-10 07:01:27,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=68, service_months=192
2025-05-10 07:01:27,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=36, service_months=117
2025-05-10 07:01:27,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=67, service_months=245
2025-05-10 07:01:27,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=31, service_months=81
2025-05-10 07:01:27,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=48, service_months=222
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=71, service_months=206
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=36, service_months=141
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=35, service_months=92
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=67, service_months=222
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=60, service_months=345
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=53, service_months=74
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=60, service_months=119
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=42, service_months=114
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=68, service_months=205
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=45, service_months=76
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=47, service_months=176
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=53, service_months=205
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=72, service_months=72
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=62, service_months=62
2025-05-10 07:01:27,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=53, service_months=64
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=35, service_months=70
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=48, service_months=67
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=48, service_months=70
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=59, service_months=70
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=47, service_months=61
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=62, service_months=67
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=34, service_months=71
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=51, service_months=69
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=44, service_months=62
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=63, service_months=49
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=46, service_months=55
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=42, service_months=54
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=69, service_months=53
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=56, service_months=50
2025-05-10 07:01:27,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=50, service_months=60
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=68, service_months=60
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=52, service_months=57
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=33, service_months=60
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=57, service_months=49
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=37, service_months=49
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=62, service_months=54
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=59, service_months=49
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=64, service_months=56
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=51, service_months=52
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=49, service_months=58
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=50, service_months=52
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=35, service_months=58
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=42, service_months=37
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=48, service_months=41
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=47, service_months=43
2025-05-10 07:01:27,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=42, service_months=37
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=53, service_months=38
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=37, service_months=48
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=46, service_months=43
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=55, service_months=44
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=61, service_months=44
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=29, service_months=37
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=54, service_months=41
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=44, service_months=44
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=34, service_months=46
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=29, service_months=39
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=39, service_months=42
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=49, service_months=47
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=44, service_months=44
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=37, service_months=39
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=49, service_months=37
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=29, service_months=42
2025-05-10 07:01:27,753 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=65, service_months=43
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=43, service_months=39
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=63, service_months=46
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=53, service_months=46
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=73, service_months=46
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=71, service_months=37
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=36, service_months=42
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=69, service_months=38
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=47, service_months=42
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=40, service_months=47
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=53, service_months=42
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=38, service_months=48
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=34, service_months=41
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=60, service_months=48
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=36, service_months=41
2025-05-10 07:01:27,754 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=39, service_months=43
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=52, service_months=48
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=55, service_months=40
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=27, service_months=46
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=62, service_months=46
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=23, service_months=39
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=30, service_months=38
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=34, service_months=40
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=45, service_months=45
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=36, service_months=43
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=42, service_months=38
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=51, service_months=37
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=29, service_months=43
2025-05-10 07:01:27,755 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=46, service_months=38
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=59, service_months=43
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=45, service_months=56
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=54, service_months=55
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=38, service_months=51
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=36, service_months=57
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=53, service_months=58
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=40, service_months=59
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=44, service_months=49
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=60, service_months=56
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=60, service_months=162
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=47, service_months=99
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=47, service_months=55
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=27, service_months=52
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=44, service_months=60
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=51, service_months=49
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=61, service_months=68
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=40, service_months=65
2025-05-10 07:01:27,756 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=54, service_months=57
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=43, service_months=53
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=48, service_months=56
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=42, service_months=58
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=45, service_months=53
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=57, service_months=65
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=45, service_months=65
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=40, service_months=89
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=55, service_months=55
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=61, service_months=55
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=35, service_months=49
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=49, service_months=71
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=44, service_months=53
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=41, service_months=57
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=29, service_months=49
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=61, service_months=68
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=38, service_months=60
2025-05-10 07:01:27,757 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=59, service_months=53
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=68, service_months=226
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=53, service_months=172
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=47, service_months=49
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=55, service_months=51
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=66, service_months=105
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=52, service_months=180
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=49, service_months=157
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=32, service_months=58
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=48, service_months=54
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=28, service_months=56
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=60, service_months=204
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=40, service_months=169
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=66, service_months=68
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=42, service_months=66
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=64, service_months=58
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=36, service_months=56
2025-05-10 07:01:27,758 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,759 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,760 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,762 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-10 07:01:27,768 [DEBUG   ] [cost_model.engines.term.run:115] Generated 21 termination events for year 2028.
2025-05-10 07:01:27,768 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((175, 11)) with 171 new events...
2025-05-10 07:01:27,769 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-10 07:01:27,770 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 86 compensation updates to active employees.
2025-05-10 07:01:27,771 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 21 termination updates to existing employees.
2025-05-10 07:01:27,772 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (175, 11)
2025-05-10 07:01:27,774 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((175, 11)) with 18 new events...
2025-05-10 07:01:27,774 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 9 new hires.
2025-05-10 07:01:27,779 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 9 new hire rows to snapshot.
2025-05-10 07:01:27,780 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (184, 11)
2025-05-10 07:01:27,781 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2028] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2028.
2025-05-10 07:01:27,781 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2028] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2028-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2028
1      NaN 2028-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2028
2      NaN 2028-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2028
3      NaN 2028-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2028
4      NaN 2028-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2028
2025-05-10 07:01:27,782 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2028] 'year' column dtype: int64
2025-05-10 07:01:27,782 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2028] Unique years in returned events: [2028]
2025-05-10 07:01:27,782 [INFO    ] [__main__.run_5_year_projection_test:379] EOY 2028 - Snapshot shape: (184, 11), Active: 111
2025-05-10 07:01:27,782 [DEBUG   ] [__main__.run_5_year_projection_test:401] Year 2028: Found 0 terminations in events_generated_this_year.
2025-05-10 07:01:27,783 [DEBUG   ] [__main__.run_5_year_projection_test:419] Year 2028: Found 0 hires in events_generated_this_year.
2025-05-10 07:01:27,783 [INFO    ] [__main__.run_5_year_projection_test:350] --- Simulating Year 2029 (Index 4) ---
2025-05-10 07:01:27,783 [DEBUG   ] [__main__.run_5_year_projection_test:351] SOY 2029 - Snapshot shape: (184, 11), Active: 111
2025-05-10 07:01:27,784 [DEBUG   ] [__main__.run_5_year_projection_test:362] Hazard slice for 2029:
    year employee_role tenure_band  term_rate  growth_rate  comp_raise_pctcfg
48  2029         Staff     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
49  2029         Staff      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
50  2029         Staff      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
51  2029       Manager      10+yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
52  2029       Manager      3-5yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
53  2029       Manager     5-10yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
54  2029         Staff      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
55  2029       Manager      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
56  2029     Executive      1-3yrs       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
57  2029         Staff       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
58  2029       Manager       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
59  2029     Executive       0-1yr       0.15         0.05            0.05  namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map=namespace()))
2025-05-10 07:01:27,785 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=43, service_months=165
2025-05-10 07:01:27,785 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=54, service_months=226
2025-05-10 07:01:27,785 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=69, service_months=204
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=37, service_months=129
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=68, service_months=257
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=32, service_months=93
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=49, service_months=234
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=72, service_months=218
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=37, service_months=153
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=36, service_months=104
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=68, service_months=234
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=61, service_months=357
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=54, service_months=86
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=61, service_months=131
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=43, service_months=126
2025-05-10 07:01:27,786 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=69, service_months=217
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=46, service_months=88
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=48, service_months=188
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=54, service_months=217
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=73, service_months=84
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=63, service_months=74
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=54, service_months=76
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=36, service_months=82
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=49, service_months=79
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=49, service_months=82
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=60, service_months=82
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=48, service_months=73
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=63, service_months=79
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=35, service_months=83
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=52, service_months=81
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=45, service_months=74
2025-05-10 07:01:27,787 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=64, service_months=61
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=47, service_months=67
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=43, service_months=66
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=70, service_months=65
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=57, service_months=62
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=51, service_months=72
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=69, service_months=72
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=53, service_months=69
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=34, service_months=72
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=58, service_months=61
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=38, service_months=61
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=63, service_months=66
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=60, service_months=61
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=65, service_months=68
2025-05-10 07:01:27,788 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=52, service_months=64
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=50, service_months=70
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=51, service_months=64
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=36, service_months=70
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=43, service_months=49
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=49, service_months=53
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=48, service_months=55
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=43, service_months=49
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=54, service_months=50
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=38, service_months=60
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=47, service_months=55
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=56, service_months=56
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=62, service_months=56
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=30, service_months=49
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=55, service_months=53
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=45, service_months=56
2025-05-10 07:01:27,789 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=35, service_months=58
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=30, service_months=51
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=40, service_months=54
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=50, service_months=59
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=45, service_months=56
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=38, service_months=51
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=50, service_months=49
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=30, service_months=54
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=66, service_months=55
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=44, service_months=51
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=64, service_months=58
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=54, service_months=58
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=74, service_months=58
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=72, service_months=49
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=37, service_months=54
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=70, service_months=50
2025-05-10 07:01:27,790 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=48, service_months=54
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=41, service_months=59
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=54, service_months=54
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=39, service_months=60
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=35, service_months=53
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=61, service_months=60
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=37, service_months=53
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=40, service_months=55
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=53, service_months=60
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=56, service_months=52
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=28, service_months=58
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=63, service_months=58
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=24, service_months=51
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=31, service_months=50
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=35, service_months=52
2025-05-10 07:01:27,791 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=46, service_months=57
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=37, service_months=55
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=43, service_months=50
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=52, service_months=49
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=30, service_months=55
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=47, service_months=50
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=60, service_months=55
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_787800_000178': birth=1982-06-25 00:00:00, hire=2023-05-22 00:00:00, age=46, service_months=68
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_432398_000192': birth=1973-07-14 00:00:00, hire=2023-06-17 00:00:00, age=55, service_months=67
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_874410_000200': birth=1989-05-16 00:00:00, hire=2023-10-06 00:00:00, age=39, service_months=63
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_359903_000175': birth=1991-04-15 00:00:00, hire=2023-04-15 00:00:00, age=37, service_months=69
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_754885_000195': birth=1974-10-24 00:00:00, hire=2023-03-05 00:00:00, age=54, service_months=70
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_450171_000196': birth=1987-04-11 00:00:00, hire=2023-02-16 00:00:00, age=41, service_months=71
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_128328_000187': birth=1983-07-08 00:00:00, hire=2023-12-30 00:00:00, age=45, service_months=61
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_937981_000164': birth=1967-08-17 00:00:00, hire=2023-05-17 00:00:00, age=61, service_months=68
2025-05-10 07:01:27,792 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_374482_000089': birth=1967-08-11 00:00:00, hire=2014-07-04 00:00:00, age=61, service_months=174
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_335025_000017': birth=1980-09-21 00:00:00, hire=2019-10-13 00:00:00, age=48, service_months=111
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_159455_000167': birth=1980-01-15 00:00:00, hire=2023-06-19 00:00:00, age=48, service_months=67
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_981004_000160': birth=2000-01-27 00:00:00, hire=2023-09-06 00:00:00, age=28, service_months=64
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_423833_000171': birth=1983-06-11 00:00:00, hire=2023-01-14 00:00:00, age=45, service_months=72
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_491476_000191': birth=1976-08-27 00:00:00, hire=2023-12-17 00:00:00, age=52, service_months=61
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_945525_000108': birth=1966-02-19 00:00:00, hire=2022-05-25 00:00:00, age=62, service_months=80
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_670415_000149': birth=1987-04-13 00:00:00, hire=2022-08-02 00:00:00, age=41, service_months=77
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_802446_000158': birth=1973-07-15 00:00:00, hire=2023-04-04 00:00:00, age=55, service_months=69
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_960846_000153': birth=1984-05-23 00:00:00, hire=2023-08-02 00:00:00, age=44, service_months=65
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_162302_000174': birth=1979-11-20 00:00:00, hire=2023-05-25 00:00:00, age=49, service_months=68
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_349161_000198': birth=1985-03-06 00:00:00, hire=2023-03-06 00:00:00, age=43, service_months=70
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_972372_000156': birth=1982-07-09 00:00:00, hire=2023-08-29 00:00:00, age=46, service_months=65
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_938622_000132': birth=1970-05-19 00:00:00, hire=2022-08-16 00:00:00, age=58, service_months=77
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_289575_000133': birth=1982-12-09 00:00:00, hire=2022-08-22 00:00:00, age=46, service_months=77
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_132546_000066': birth=1987-04-24 00:00:00, hire=2020-08-07 00:00:00, age=41, service_months=101
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_751464_000179': birth=1972-01-21 00:00:00, hire=2023-06-12 00:00:00, age=56, service_months=67
2025-05-10 07:01:27,793 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_115590_000189': birth=1966-06-08 00:00:00, hire=2023-06-23 00:00:00, age=62, service_months=67
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_924184_000152': birth=1992-10-23 00:00:00, hire=2023-12-24 00:00:00, age=36, service_months=61
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_580547_000111': birth=1978-10-13 00:00:00, hire=2022-02-08 00:00:00, age=50, service_months=83
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_772849_000190': birth=1983-10-13 00:00:00, hire=2023-08-21 00:00:00, age=45, service_months=65
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_918902_000199': birth=1986-10-06 00:00:00, hire=2023-04-10 00:00:00, age=42, service_months=69
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_194135_000159': birth=1998-09-19 00:00:00, hire=2023-12-12 00:00:00, age=30, service_months=61
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_891995_000110': birth=1966-09-19 00:00:00, hire=2022-05-19 00:00:00, age=62, service_months=80
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_884012_000181': birth=1989-12-16 00:00:00, hire=2023-01-18 00:00:00, age=39, service_months=72
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_983688_000154': birth=1968-02-01 00:00:00, hire=2023-08-04 00:00:00, age=60, service_months=65
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_563570_000093': birth=1959-09-18 00:00:00, hire=2009-03-08 00:00:00, age=69, service_months=238
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_802655_000010': birth=1974-08-14 00:00:00, hire=2013-09-22 00:00:00, age=54, service_months=184
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_234783_000163': birth=1980-06-07 00:00:00, hire=2023-12-19 00:00:00, age=48, service_months=61
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_480527_000197': birth=1972-06-17 00:00:00, hire=2023-10-01 00:00:00, age=56, service_months=63
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_695494_000030': birth=1961-12-07 00:00:00, hire=2019-04-28 00:00:00, age=67, service_months=117
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_376781_000092': birth=1975-09-28 00:00:00, hire=2013-01-21 00:00:00, age=53, service_months=192
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_843448_000047': birth=1978-07-28 00:00:00, hire=2014-12-03 00:00:00, age=50, service_months=169
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_163468_000157': birth=1995-05-09 00:00:00, hire=2023-03-02 00:00:00, age=33, service_months=70
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_930610_000177': birth=1979-10-11 00:00:00, hire=2023-07-18 00:00:00, age=49, service_months=66
2025-05-10 07:01:27,794 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_228914_000151': birth=1999-12-06 00:00:00, hire=2023-05-27 00:00:00, age=29, service_months=68
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_786611_000088': birth=1967-04-14 00:00:00, hire=2011-01-05 00:00:00, age=61, service_months=216
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_EX_529547_000075': birth=1987-06-03 00:00:00, hire=2013-12-25 00:00:00, age=41, service_months=181
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_165566_000136': birth=1961-06-15 00:00:00, hire=2022-05-06 00:00:00, age=67, service_months=80
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_862579_000146': birth=1985-11-24 00:00:00, hire=2022-07-18 00:00:00, age=43, service_months=78
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_912390_000186': birth=1963-03-22 00:00:00, hire=2023-03-10 00:00:00, age=65, service_months=70
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for 'DUMMY_NH_502603_000169': birth=1991-02-14 00:00:00, hire=2023-05-06 00:00:00, age=37, service_months=68
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,795 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,796 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:34] Eligibility check for '<NA>': birth=NaT, hire=NaT, age=nan, service_months=nan
2025-05-10 07:01:27,797 [DEBUG   ] [cost_model.plan_rules.eligibility.run:54] Not eligible: <NA> (age=nan, service_months=nan)
2025-05-10 07:01:27,799 [DEBUG   ] [cost_model.plan_rules.enrollment.run:50] [Enrollment] rule skipped, config missing or disabled.
2025-05-10 07:01:27,805 [DEBUG   ] [cost_model.engines.term.run:115] Generated 25 termination events for year 2029.
2025-05-10 07:01:27,805 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((184, 11)) with 175 new events...
2025-05-10 07:01:27,806 [DEBUG   ] [cost_model.state.snapshot.update:379] Processing updates for 150 potentially existing employees found in new events.
2025-05-10 07:01:27,807 [DEBUG   ] [cost_model.state.snapshot.update:401] Applied 77 compensation updates to active employees.
2025-05-10 07:01:27,808 [DEBUG   ] [cost_model.state.snapshot.update:420] Applied 25 termination updates to existing employees.
2025-05-10 07:01:27,808 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (184, 11)
2025-05-10 07:01:27,810 [INFO    ] [cost_model.state.snapshot.update:273] Updating snapshot ((184, 11)) with 20 new events...
2025-05-10 07:01:27,811 [DEBUG   ] [cost_model.state.snapshot.update:293] Processing 10 new hires.
2025-05-10 07:01:27,819 [DEBUG   ] [cost_model.state.snapshot.update:370] Appended 10 new hire rows to snapshot.
2025-05-10 07:01:27,820 [INFO    ] [cost_model.state.snapshot.update:428] Snapshot update complete. New shape: (194, 11)
2025-05-10 07:01:27,821 [WARNING ] [cost_model.engines.run_one_year.run_one_year:181] [RUN_ONE_YEAR SIM_YR=2029] 'year' column MISSING in full_event_log. Adding it with current simulation year: 2029.
2025-05-10 07:01:27,822 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:223] [RUN_ONE_YEAR SIM_YR=2029] Events being returned (head 5):
  event_id event_time             employee_id event_type  value_num value_json                                                                meta  year
0      NaN 2029-01-01  DUMMY_EX_181509_000011       comp       0.05        NaN         {"old_comp": 77068.45, "new_comp": 80921.8725, "pct": 0.05}  2029
1      NaN 2029-01-01  DUMMY_EX_554513_000013       comp       0.05        NaN  {"old_comp": 61305.55, "new_comp": 64370.82750000001, "pct": 0.05}  2029
2      NaN 2029-01-01  DUMMY_EX_371360_000016       comp       0.05        NaN         {"old_comp": 66909.57, "new_comp": 70255.0485, "pct": 0.05}  2029
3      NaN 2029-01-01  DUMMY_EX_276791_000032       comp       0.05        NaN  {"old_comp": 62780.69, "new_comp": 65919.72450000001, "pct": 0.05}  2029
4      NaN 2029-01-01  DUMMY_EX_557534_000035       comp       0.05        NaN  {"old_comp": 72076.83, "new_comp": 75680.67150000001, "pct": 0.05}  2029
2025-05-10 07:01:27,822 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:225] [RUN_ONE_YEAR SIM_YR=2029] 'year' column dtype: int64
2025-05-10 07:01:27,822 [DEBUG   ] [cost_model.engines.run_one_year.run_one_year:226] [RUN_ONE_YEAR SIM_YR=2029] Unique years in returned events: [2029]
2025-05-10 07:01:27,822 [INFO    ] [__main__.run_5_year_projection_test:379] EOY 2029 - Snapshot shape: (194, 11), Active: 109
2025-05-10 07:01:27,823 [DEBUG   ] [__main__.run_5_year_projection_test:401] Year 2029: Found 0 terminations in events_generated_this_year.
2025-05-10 07:01:27,823 [DEBUG   ] [__main__.run_5_year_projection_test:419] Year 2029: Found 0 hires in events_generated_this_year.
2025-05-10 07:01:27,824 [INFO    ] [__main__.run_5_year_projection_test:444] 
--- Projection Summary ---
2025-05-10 07:01:27,832 [INFO    ] [__main__.run_5_year_projection_test:450] Projection summary and final event log saved to: output_dev/projection_run_output
2025-05-10 07:01:27,846 [DEBUG   ] [matplotlib.pyplot.switch_backend:487] Loaded backend macosx version unknown.
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,936 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,937 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,938 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,939 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,940 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,941 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,942 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,943 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-10 07:01:27,944 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,945 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-10 07:01:27,946 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,947 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,948 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-10 07:01:27,991 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1416] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-10 07:01:27,991 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-10 07:01:27,991 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,991 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,993 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,993 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,993 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,993 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,993 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,993 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,993 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,994 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,994 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-10 07:01:27,994 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,994 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,994 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,994 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,994 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,995 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,995 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,995 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,995 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,995 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,996 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,996 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,996 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,997 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-10 07:01:27,997 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,997 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,997 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,997 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:27,997 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,997 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,998 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,999 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,999 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.otf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,999 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,999 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,999 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:27,999 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,000 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,001 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,002 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,002 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,002 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,002 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,003 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,004 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,004 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,004 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,004 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,004 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,005 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,006 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,007 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,007 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,007 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,007 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:28,008 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,009 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-10 07:01:28,010 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,011 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,012 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,013 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,013 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,014 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,015 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/DecoTypeNastaleeqUrdu.ttc', name='DecoType Nastaleeq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:28,027 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,028 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,030 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,031 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,031 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,031 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,031 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,031 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,034 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,035 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,035 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,035 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,035 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-10 07:01:28,035 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,035 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,035 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,038 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,038 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,039 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,039 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,039 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,039 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,039 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,039 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,040 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-10 07:01:28,041 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,041 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,041 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,041 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-10 07:01:28,041 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,041 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,041 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.otf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/CJKSymbolsFallback.ttc', name='.CJK Symbols Fallback HK', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,042 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,043 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,044 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,045 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-10 07:01:28,046 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,046 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,046 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-10 07:01:28,046 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,046 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,046 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1428] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-10 07:01:28,046 [DEBUG   ] [matplotlib.font_manager._findfont_cached:1460] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-10 07:01:28,085 [INFO    ] [__main__.run_5_year_projection_test:476] Projection plot saved to: output_dev/projection_run_output/headcount_projection.png
