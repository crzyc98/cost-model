2025-05-16 09:31:30,640 [INFO    ] [cost_model.projections.cli.main:75] Starting projection run with CLI arguments: Namespace(config='config/dev_tiny.yaml', census='data/census_preprocessed.parquet', debug=False, output_dir=None, scenario_name='projection_cli')
2025-05-16 09:31:30,640 [INFO    ] [cost_model.projections.cli.main:79] Loading configuration from: config/dev_tiny.yaml
2025-05-16 09:31:30,641 [INFO    ] [cost_model.config.loaders.load_yaml_config:71] Attempting to load configuration from: config/dev_tiny.yaml
2025-05-16 09:31:30,648 [INFO    ] [cost_model.config.loaders.load_yaml_config:89] Successfully loaded configuration from config/dev_tiny.yaml
2025-05-16 09:31:30,653 [INFO    ] [cost_model.projections.cli.main:85] Logging level set to: DEBUG
2025-05-16 09:31:30,653 [INFO    ] [cost_model.projections.cli.main:95] Output will be saved to: output_dev/projection_cli_results
2025-05-16 09:31:30,653 [INFO    ] [cost_model.projections.cli.main:100] Creating initial snapshot from census: data/census_preprocessed.parquet for start year: 2025
2025-05-16 09:31:30,653 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:25] Creating initial snapshot for start year: 2025 from data/census_preprocessed.parquet
2025-05-16 09:31:30,711 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:35] Loaded census data with 150 records. Columns: ['employee_id', 'employee_role', 'employee_birth_date', 'employee_hire_date', 'employee_termination_date', 'employee_gross_compensation', 'employee_plan_year_compensation', 'employee_capped_compensation', 'employee_deferral_rate', 'employee_contribution', 'employer_core_contribution', 'employer_match_contribution']
2025-05-16 09:31:30,715 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:50] Filtered out 50 employees terminated before or at 2025-01-01. Remaining: 100
2025-05-16 09:31:30,715 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:62] Setting active status based on termination dates: 100 active out of 100
2025-05-16 09:31:30,717 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:129] Inferring job levels from compensation data...
2025-05-16 09:31:30,722 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:156] Inferred job levels: {1: 57, 0: 18, 4: 16, 3: 7, 2: 2}
2025-05-16 09:31:30,723 [DEBUG   ] [cost_model.projections.snapshot.create_initial_snapshot:157] Job levels distribution: employee_level
1    57
0    18
4    16
3     7
2     2
Name: count, dtype: Int64
2025-05-16 09:31:30,723 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:166] Using 'employee_role' column from census data
2025-05-16 09:31:30,728 [INFO    ] [cost_model.projections.snapshot.create_initial_snapshot:318] Initial snapshot created with 100 records. Columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band', 'employee_tenure', 'employee_level', 'job_level_source', 'exited', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg', 'simulation_year']
2025-05-16 09:31:30,728 [DEBUG   ] [cost_model.projections.snapshot.create_initial_snapshot:319] Initial snapshot dtypes:
employee_id                    string[python]
employee_hire_date             datetime64[ns]
employee_birth_date            datetime64[ns]
employee_role                  string[python]
employee_gross_compensation           Float64
employee_termination_date      datetime64[ns]
active                                boolean
employee_deferral_rate                Float64
tenure_band                    string[python]
employee_tenure                       float64
employee_level                          Int64
job_level_source                     category
exited                                boolean
term_rate                             Float64
comp_raise_pct                        Float64
new_hire_termination_rate             Float64
cola_pct                              Float64
cfg                            string[python]
simulation_year                         int64
dtype: object
2025-05-16 09:31:30,728 [INFO    ] [cost_model.projections.cli.main:104] Creating initial event log for start year: 2025
2025-05-16 09:31:30,728 [INFO    ] [cost_model.projections.event_log.create_initial_event_log:19] Creating initial event log for events up to start of year: 2025
2025-05-16 09:31:30,729 [DEBUG   ] [cost_model.projections.event_log.create_initial_event_log:32] Adding missing event log column: value_json with presumed dtype: string
2025-05-16 09:31:30,729 [DEBUG   ] [cost_model.projections.event_log.create_initial_event_log:32] Adding missing event log column: meta with presumed dtype: string
2025-05-16 09:31:30,730 [INFO    ] [cost_model.projections.event_log.create_initial_event_log:56] Initial event log created with 2 records. Dtypes:
event_id       string[python]
event_time     datetime64[ns]
employee_id    string[python]
event_type     string[python]
value_num             Float64
value_json     string[python]
meta           string[python]
dtype: object
2025-05-16 09:31:30,730 [INFO    ] [cost_model.projections.cli.main:108] Starting projection engine...
2025-05-16 09:31:30,730 [INFO    ] [cost_model.config.loaders.load_yaml_config:71] Attempting to load configuration from: config/dev_tiny.yaml
2025-05-16 09:31:30,737 [INFO    ] [cost_model.config.loaders.load_yaml_config:89] Successfully loaded configuration from config/dev_tiny.yaml
2025-05-16 09:31:30,737 [INFO    ] [cost_model.config.params.parse_config:114] Parsed global parameters: namespace(seed=42, start_year=2025, num_years=5, new_hire_rate=0.17, term_rate=0.15, comp_raise_pct=0.03, cola_pct=0.02, new_hire_termination_rate=0.25, compensation=namespace(cola_pct=0.02, comp_raise_pct=0.03))
2025-05-16 09:31:30,737 [INFO    ] [cost_model.config.params.parse_config:115] Parsed plan rules: namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(_2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map={}))
2025-05-16 09:31:30,737 [DEBUG   ] [cost_model.projections.runner.init.initialize:61] Snapshot columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band', 'employee_tenure', 'employee_level', 'job_level_source', 'exited', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg', 'simulation_year']
2025-05-16 09:31:30,737 [DEBUG   ] [cost_model.projections.runner.init.initialize:62] Expected columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band', 'employee_tenure', 'employee_level', 'job_level_source', 'exited', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg']
2025-05-16 09:31:30,737 [DEBUG   ] [cost_model.projections.runner.init.initialize:65] Snapshot columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_role', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band', 'employee_tenure', 'employee_level', 'job_level_source', 'exited', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg', 'simulation_year']
2025-05-16 09:31:30,737 [DEBUG   ] [cost_model.projections.runner.init.initialize:66] Expected columns: ['employee_id', 'employee_hire_date', 'employee_birth_date', 'employee_gross_compensation', 'employee_termination_date', 'active', 'employee_deferral_rate', 'tenure_band', 'employee_tenure', 'employee_level', 'job_level_source', 'exited', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg']
2025-05-16 09:31:30,738 [INFO    ] [cost_model.projections.runner.init.initialize:97] Initialized projection engine for years: [2025, 2026, 2027, 2028, 2029]
2025-05-16 09:31:30,738 [DEBUG   ] [cost_model.projections.runner.init.initialize:98] Global parameters: namespace(seed=42, start_year=2025, num_years=5, new_hire_rate=0.17, term_rate=0.15, comp_raise_pct=0.03, cola_pct=0.02, new_hire_termination_rate=0.25, compensation=namespace(cola_pct=0.02, comp_raise_pct=0.03))
2025-05-16 09:31:30,738 [DEBUG   ] [cost_model.projections.runner.init.initialize:99] Plan rules: namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(_2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map={}))
2025-05-16 09:31:30,738 [INFO    ] [cost_model.projections.hazard.build_hazard_table:30] Generating hazard table...
2025-05-16 09:31:30,739 [WARNING ] [cost_model.projections.hazard.build_hazard_table:42] global_params missing 'annual_termination_rate'. Using default 0.10. Available attributes: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'cola_pct', 'comp_raise_pct', 'compensation', 'new_hire_rate', 'new_hire_termination_rate', 'num_years', 'seed', 'start_year', 'term_rate']
2025-05-16 09:31:30,740 [WARNING ] [cost_model.projections.hazard.build_hazard_table:47] global_params missing 'annual_compensation_increase_rate'. Using default 0.03. Available attributes: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'cola_pct', 'comp_raise_pct', 'compensation', 'new_hire_rate', 'new_hire_termination_rate', 'num_years', 'seed', 'start_year', 'term_rate']
2025-05-16 09:31:30,740 [INFO    ] [cost_model.projections.hazard.build_hazard_table:54] Using global rates: Term=0.1, CompPct=0.03, NH_Term=0.25
2025-05-16 09:31:30,740 [INFO    ] [cost_model.projections.hazard.build_hazard_table:71] Hazard table with 16 rows.
2025-05-16 09:31:30,740 [DEBUG   ] [cost_model.engines.run_one_year_engine.run_one_year:124] Hazard‐table columns before rename: ['simulation_year', 'employee_level', 'tenure_band', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg']
2025-05-16 09:31:30,740 [DEBUG   ] [cost_model.engines.run_one_year_engine.run_one_year:135] Hazard‐table columns after  rename: ['simulation_year', 'employee_level', 'tenure_band', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg']
2025-05-16 09:31:30,741 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:160] [RUN_ONE_YEAR YR=2025] hazard_slice levels: [1, 4, 2, 3, 0]
2025-05-16 09:31:30,741 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:161] [RUN_ONE_YEAR YR=2025] hazard_slice tenure_bands: ['5-10', '10-15', '15-20', '3-5', '20+', '1-3', '0-1']
2025-05-16 09:31:30,741 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:162] [RUN_ONE_YEAR YR=2025] snapshot levels: [1, 4, 2, 3, 0]
2025-05-16 09:31:30,741 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:163] [RUN_ONE_YEAR YR=2025] snapshot tenure_bands: ['5-10', '10-15', '15-20', '3-5', '20+', '1-3', '0-1']
2025-05-16 09:31:30,741 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:179] [RUN_ONE_YEAR YR=2025] Rates → term=0.100, comp=0.030, nh_term=0.250
2025-05-16 09:31:30,745 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_181509_000011': birth=1985-07-17 00:00:00, hire=2015-04-19 00:00:00, age=39, service_months=117
2025-05-16 09:31:30,745 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_554513_000013': birth=1974-10-12 00:00:00, hire=2010-03-31 00:00:00, age=50, service_months=178
2025-05-16 09:31:30,745 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_371360_000016': birth=1959-05-26 00:00:00, hire=2012-01-10 00:00:00, age=65, service_months=156
2025-05-16 09:31:30,745 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_276791_000032': birth=1991-12-01 00:00:00, hire=2018-04-15 00:00:00, age=33, service_months=81
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_557534_000035': birth=1960-08-15 00:00:00, hire=2007-08-03 00:00:00, age=64, service_months=209
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_248978_000042': birth=1996-03-05 00:00:00, hire=2021-04-26 00:00:00, age=28, service_months=45
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_845395_000043': birth=1979-04-21 00:00:00, hire=2009-07-13 00:00:00, age=45, service_months=186
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_146765_000046': birth=1956-04-23 00:00:00, hire=2010-11-02 00:00:00, age=68, service_months=170
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_871814_000048': birth=1991-06-14 00:00:00, hire=2016-04-17 00:00:00, age=33, service_months=105
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_787530_000056': birth=1992-10-04 00:00:00, hire=2020-05-03 00:00:00, age=32, service_months=56
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_802270_000060': birth=1960-06-04 00:00:00, hire=2009-07-15 00:00:00, age=64, service_months=186
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_716045_000063': birth=1967-04-02 00:00:00, hire=1999-04-05 00:00:00, age=57, service_months=309
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_113115_000065': birth=1974-11-26 00:00:00, hire=2021-11-01 00:00:00, age=50, service_months=38
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_861514_000067': birth=1967-09-13 00:00:00, hire=2018-02-13 00:00:00, age=57, service_months=83
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_839696_000079': birth=1985-01-16 00:00:00, hire=2018-07-28 00:00:00, age=39, service_months=78
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_557478_000081': birth=1959-05-03 00:00:00, hire=2010-12-16 00:00:00, age=65, service_months=169
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_995917_000082': birth=1982-12-18 00:00:00, hire=2021-09-07 00:00:00, age=42, service_months=40
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_647163_000091': birth=1980-12-12 00:00:00, hire=2013-05-01 00:00:00, age=44, service_months=140
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_EX_840323_000098': birth=1974-10-20 00:00:00, hire=2010-12-06 00:00:00, age=50, service_months=169
2025-05-16 09:31:30,746 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_814926_000102': birth=1955-07-08 00:00:00, hire=2022-01-02 00:00:00, age=69, service_months=36
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_449357_000103': birth=1965-02-03 00:00:00, hire=2022-11-18 00:00:00, age=59, service_months=26
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_572730_000106': birth=1974-05-15 00:00:00, hire=2022-09-22 00:00:00, age=50, service_months=28
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_824486_000113': birth=1966-09-18 00:00:00, hire=2022-05-25 00:00:00, age=58, service_months=32
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_426416_000115': birth=1992-05-10 00:00:00, hire=2022-03-01 00:00:00, age=32, service_months=34
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_978079_000117': birth=1979-03-02 00:00:00, hire=2022-06-20 00:00:00, age=45, service_months=31
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_768665_000121': birth=1979-08-15 00:00:00, hire=2022-03-02 00:00:00, age=45, service_months=34
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_446407_000124': birth=1968-04-18 00:00:00, hire=2022-03-07 00:00:00, age=56, service_months=34
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_264252_000128': birth=1980-12-24 00:00:00, hire=2022-12-14 00:00:00, age=44, service_months=25
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_630610_000139': birth=1965-07-10 00:00:00, hire=2022-06-03 00:00:00, age=59, service_months=31
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_517930_000140': birth=1993-06-24 00:00:00, hire=2022-02-03 00:00:00, age=31, service_months=35
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_770974_000144': birth=1976-04-02 00:00:00, hire=2022-04-27 00:00:00, age=48, service_months=33
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_590026_000145': birth=1983-01-20 00:00:00, hire=2022-11-16 00:00:00, age=41, service_months=26
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_820606_000155': birth=1964-08-23 00:00:00, hire=2023-12-07 00:00:00, age=60, service_months=13
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_235928_000161': birth=1981-11-06 00:00:00, hire=2023-06-20 00:00:00, age=43, service_months=19
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_892526_000162': birth=1985-11-24 00:00:00, hire=2023-07-26 00:00:00, age=39, service_months=18
2025-05-16 09:31:30,747 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_320008_000165': birth=1958-07-21 00:00:00, hire=2023-08-10 00:00:00, age=66, service_months=17
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_215889_000166': birth=1971-02-07 00:00:00, hire=2023-11-02 00:00:00, age=53, service_months=14
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_202240_000168': birth=1977-05-04 00:00:00, hire=2023-01-15 00:00:00, age=47, service_months=24
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_302145_000170': birth=1959-10-07 00:00:00, hire=2023-01-30 00:00:00, age=65, service_months=24
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_694639_000172': birth=1975-01-16 00:00:00, hire=2023-04-21 00:00:00, age=49, service_months=21
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_785598_000173': birth=1994-11-08 00:00:00, hire=2023-01-22 00:00:00, age=30, service_months=24
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_214746_000176': birth=1970-09-04 00:00:00, hire=2023-12-23 00:00:00, age=54, service_months=13
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_383697_000180': birth=1990-02-08 00:00:00, hire=2023-12-23 00:00:00, age=34, service_months=13
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_233734_000182': birth=1965-07-08 00:00:00, hire=2023-07-16 00:00:00, age=59, service_months=18
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_876713_000183': birth=1968-08-18 00:00:00, hire=2023-12-13 00:00:00, age=56, service_months=13
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_466441_000184': birth=1963-06-24 00:00:00, hire=2023-05-19 00:00:00, age=61, service_months=20
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_654803_000185': birth=1976-04-05 00:00:00, hire=2023-09-03 00:00:00, age=48, service_months=16
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_975970_000188': birth=1978-01-07 00:00:00, hire=2023-03-25 00:00:00, age=46, service_months=22
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_448152_000193': birth=1977-03-04 00:00:00, hire=2023-09-30 00:00:00, age=47, service_months=16
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_189765_000194': birth=1992-12-08 00:00:00, hire=2023-03-14 00:00:00, age=32, service_months=22
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_564913_000201': birth=1985-10-18 00:00:00, hire=2024-12-24 00:00:00, age=39, service_months=1
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_286731_000202': birth=1979-05-09 00:00:00, hire=2024-08-29 00:00:00, age=45, service_months=5
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_926080_000203': birth=1980-09-17 00:00:00, hire=2024-06-30 00:00:00, age=44, service_months=7
2025-05-16 09:31:30,748 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_775373_000204': birth=1985-01-12 00:00:00, hire=2024-12-11 00:00:00, age=39, service_months=1
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_572298_000205': birth=1974-11-21 00:00:00, hire=2024-11-20 00:00:00, age=50, service_months=2
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_819142_000206': birth=1990-03-12 00:00:00, hire=2024-01-10 00:00:00, age=34, service_months=12
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_434417_000207': birth=1981-09-03 00:00:00, hire=2024-06-23 00:00:00, age=43, service_months=7
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_115573_000208': birth=1972-11-02 00:00:00, hire=2024-05-07 00:00:00, age=52, service_months=8
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_252650_000209': birth=1966-11-24 00:00:00, hire=2024-05-01 00:00:00, age=58, service_months=8
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_268659_000210': birth=1998-02-02 00:00:00, hire=2024-12-28 00:00:00, age=26, service_months=1
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_761402_000211': birth=1973-07-02 00:00:00, hire=2024-08-18 00:00:00, age=51, service_months=5
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_944917_000212': birth=1983-09-20 00:00:00, hire=2024-05-06 00:00:00, age=41, service_months=8
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_803274_000213': birth=1993-04-22 00:00:00, hire=2024-03-31 00:00:00, age=31, service_months=10
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_681254_000214': birth=1998-11-25 00:00:00, hire=2024-10-06 00:00:00, age=26, service_months=3
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_685439_000215': birth=1988-11-28 00:00:00, hire=2024-07-27 00:00:00, age=36, service_months=6
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_500740_000216': birth=1978-08-26 00:00:00, hire=2024-02-19 00:00:00, age=46, service_months=11
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_648448_000217': birth=1983-01-02 00:00:00, hire=2024-05-29 00:00:00, age=41, service_months=8
2025-05-16 09:31:30,749 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_849254_000218': birth=1990-09-24 00:00:00, hire=2024-10-30 00:00:00, age=34, service_months=3
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_586450_000219': birth=1978-06-21 00:00:00, hire=2024-12-05 00:00:00, age=46, service_months=1
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_998812_000220': birth=1998-09-12 00:00:00, hire=2024-07-07 00:00:00, age=26, service_months=6
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_601646_000221': birth=1962-06-15 00:00:00, hire=2024-06-13 00:00:00, age=62, service_months=7
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_628360_000222': birth=1984-01-11 00:00:00, hire=2024-10-08 00:00:00, age=40, service_months=3
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_977990_000223': birth=1964-02-28 00:00:00, hire=2024-03-02 00:00:00, age=60, service_months=10
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_377257_000224': birth=1974-05-05 00:00:00, hire=2024-03-25 00:00:00, age=50, service_months=10
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_542881_000225': birth=1954-11-23 00:00:00, hire=2024-03-22 00:00:00, age=70, service_months=10
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_674918_000226': birth=1956-07-01 00:00:00, hire=2024-12-28 00:00:00, age=68, service_months=1
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_461781_000227': birth=1991-12-11 00:00:00, hire=2024-07-12 00:00:00, age=33, service_months=6
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_317413_000228': birth=1958-12-26 00:00:00, hire=2024-11-27 00:00:00, age=66, service_months=2
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_673207_000229': birth=1980-07-05 00:00:00, hire=2024-07-04 00:00:00, age=44, service_months=6
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_826965_000230': birth=1987-05-15 00:00:00, hire=2024-02-16 00:00:00, age=37, service_months=11
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_150696_000231': birth=1974-03-28 00:00:00, hire=2024-07-21 00:00:00, age=50, service_months=6
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_329729_000232': birth=1989-08-20 00:00:00, hire=2024-01-24 00:00:00, age=35, service_months=12
2025-05-16 09:31:30,750 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_120009_000233': birth=1993-11-15 00:00:00, hire=2024-08-10 00:00:00, age=31, service_months=5
2025-05-16 09:31:30,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_506687_000234': birth=1967-10-04 00:00:00, hire=2024-01-05 00:00:00, age=57, service_months=12
2025-05-16 09:31:30,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_713525_000235': birth=1991-02-23 00:00:00, hire=2024-08-29 00:00:00, age=33, service_months=5
2025-05-16 09:31:30,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_884113_000236': birth=1988-06-26 00:00:00, hire=2024-06-23 00:00:00, age=36, service_months=7
2025-05-16 09:31:30,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_194336_000237': birth=1975-05-11 00:00:00, hire=2024-01-07 00:00:00, age=49, service_months=12
2025-05-16 09:31:30,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_668428_000238': birth=1972-10-07 00:00:00, hire=2024-09-17 00:00:00, age=52, service_months=4
2025-05-16 09:31:30,751 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_725374_000239': birth=2000-03-25 00:00:00, hire=2024-03-22 00:00:00, age=24, service_months=10
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_225724_000240': birth=1965-10-13 00:00:00, hire=2024-03-14 00:00:00, age=59, service_months=10
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_566513_000241': birth=2004-12-25 00:00:00, hire=2024-10-06 00:00:00, age=20, service_months=3
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:60] Not eligible: DUMMY_NH_566513_000241 (age=20, service_months=3)
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_272287_000242': birth=1997-07-02 00:00:00, hire=2024-11-07 00:00:00, age=27, service_months=2
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_674346_000243': birth=1993-07-19 00:00:00, hire=2024-09-27 00:00:00, age=31, service_months=4
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_571460_000244': birth=1982-06-16 00:00:00, hire=2024-04-24 00:00:00, age=42, service_months=9
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_972996_000245': birth=1991-03-21 00:00:00, hire=2024-06-18 00:00:00, age=33, service_months=7
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_952172_000246': birth=1985-11-06 00:00:00, hire=2024-11-07 00:00:00, age=39, service_months=2
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_211690_000247': birth=1976-04-19 00:00:00, hire=2024-12-27 00:00:00, age=48, service_months=1
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_871884_000248': birth=1998-05-12 00:00:00, hire=2024-06-22 00:00:00, age=26, service_months=7
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_122992_000249': birth=1981-11-09 00:00:00, hire=2024-11-04 00:00:00, age=43, service_months=2
2025-05-16 09:31:30,752 [DEBUG   ] [cost_model.plan_rules.eligibility.run:40] Eligibility check for 'DUMMY_NH_270716_000250': birth=1968-02-20 00:00:00, hire=2024-06-28 00:00:00, age=56, service_months=7
2025-05-16 09:31:30,755 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:268] [YR=2025] SOY experienced mask: 100 | new hire mask: 0 | total: 100
2025-05-16 09:31:30,755 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:274] [YR=2025] SOY Experienced Active = 100
2025-05-16 09:31:30,755 [INFO    ] [cost_model.engines.run_one_year_engine.run_one_year:281] [YR=2025] Compensation config: namespace(cola_pct=0.02, comp_raise_pct=0.03)
2025-05-16 09:31:30,757 [INFO    ] [cost_model.engines.term.run:83] [TERM] Year 2025: 100 active employees eligible for termination.
2025-05-16 09:31:30,757 [DEBUG   ] [cost_model.engines.term.run:89] [TERM] Year 2025: hazard_slice columns: ['simulation_year', 'employee_level', 'tenure_band', 'term_rate', 'comp_raise_pct', 'new_hire_termination_rate', 'cola_pct', 'cfg']
2025-05-16 09:31:30,757 [DEBUG   ] [cost_model.engines.term.run:90] [TERM] Year 2025: hazard_slice head: {'simulation_year': {0: 2025, 1: 2025, 2: 2025, 3: 2025, 4: 2025}, 'employee_level': {0: 1, 1: 1, 2: 1, 3: 1, 4: 4}, 'tenure_band': {0: '5-10', 1: '10-15', 2: '15-20', 3: '3-5', 4: '10-15'}, 'term_rate': {0: 0.1, 1: 0.1, 2: 0.1, 3: 0.1, 4: 0.1}, 'comp_raise_pct': {0: 0.03, 1: 0.03, 2: 0.03, 3: 0.03, 4: 0.03}, 'new_hire_termination_rate': {0: 0.25, 1: 0.25, 2: 0.25, 3: 0.25, 4: 0.25}, 'cola_pct': {0: 0.02, 1: 0.02, 2: 0.02, 3: 0.02, 4: 0.02}, 'cfg': {0: namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(_2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map={})), 1: namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(_2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map={})), 2: namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(_2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map={})), 3: namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(_2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map={})), 4: namespace(eligibility=namespace(min_age=21, min_service_months=0), onboarding_bump=namespace(enabled=True, method='sample_plus_rate', rate=0.05), auto_enrollment=namespace(enabled=False, window_days=90, proactive_enrollment_probability=0.0, proactive_rate_range=[0.0, 0.0], default_rate=0.0, re_enroll_existing=False, opt_down_target_rate=0.0, increase_to_match_rate=0.0, increase_high_rate=0.0, outcome_distribution=namespace(prob_opt_out=0.0, prob_stay_default=1.0, prob_opt_down=0.0, prob_increase_to_match=0.0, prob_increase_high=0.0)), auto_increase=namespace(enabled=False, increase_rate=0.0, cap_rate=0.0), employer_match=namespace(tiers=[namespace(match_rate=0.0, cap_deferral_pct=0.0)], dollar_cap=0.0), employer_nec=namespace(rate=0.01), irs_limits=namespace(_2024=namespace(compensation_limit=345000, deferral_limit=23000, catchup_limit=7500, catchup_eligibility_age=50)), behavioral_params=namespace(voluntary_enrollment_rate=0.2, voluntary_default_deferral=0.05, voluntary_window_days=180, voluntary_change_probability=0.1, prob_increase_given_change=0.4, prob_decrease_given_change=0.3, prob_stop_given_change=0.05, voluntary_increase_amount=0.01, voluntary_decrease_amount=0.01), contributions=namespace(enabled=True), eligibility_events=namespace(milestone_months=[], milestone_years=[], event_type_map={}))}}
2025-05-16 09:31:30,758 [DEBUG   ] [cost_model.engines.term.run:100] [TERM] Year 2025: Active employee levels: [1, 4, 2, 3, 0]
2025-05-16 09:31:30,758 [DEBUG   ] [cost_model.engines.term.run:101] [TERM] Year 2025: Active employee tenure bands: ['5-10', '10-15', '15-20', '3-5', '20+', '1-3', '0-1']
2025-05-16 09:31:30,758 [DEBUG   ] [cost_model.engines.term.run:102] [TERM] Year 2025: Hazard table levels: [1, 4, 2, 3, 0]
2025-05-16 09:31:30,758 [DEBUG   ] [cost_model.engines.term.run:103] [TERM] Year 2025: Hazard table tenure bands: ['5-10', '10-15', '15-20', '3-5', '20+', '1-3', '0-1']
2025-05-16 09:31:30,760 [ERROR   ] [cost_model.projections.cli.main:149] An unexpected error occurred during the projection run: 'term_rate'
Traceback (most recent call last):
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py", line 3805, in get_loc
    return self._engine.get_loc(casted_key)
  File "index.pyx", line 167, in pandas._libs.index.IndexEngine.get_loc
  File "index.pyx", line 196, in pandas._libs.index.IndexEngine.get_loc
  File "pandas/_libs/hashtable_class_helper.pxi", line 7081, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas/_libs/hashtable_class_helper.pxi", line 7089, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'term_rate'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/cost_model/projections/cli.py", line 110, in main
    run_projection_engine(config_ns, initial_snapshot, initial_event_log)
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/cost_model/projections/runner/orchestrator.py", line 53, in run_projection_engine
    eoy_rows) = process_year(
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/cost_model/projections/runner/year_processor.py", line 63, in process_year
    year_events, _ = run_one_year(
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/cost_model/engines/run_one_year_engine.py", line 288, in run_one_year
    term_events = term.run(prev_snapshot.loc[mask_exp], hazard_slice, year_rng, deterministic_term)
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/cost_model/engines/term.py", line 127, in run
    missing_hazard = df[TERM_RATE].isna().sum()
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/pandas/core/frame.py", line 4102, in __getitem__
    indexer = self.columns.get_loc(key)
  File "/Users/nicholasamaral/Library/Mobile Documents/com~apple~CloudDocs/Development/cost-model/.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py", line 3812, in get_loc
    raise KeyError(key) from err
KeyError: 'term_rate'
